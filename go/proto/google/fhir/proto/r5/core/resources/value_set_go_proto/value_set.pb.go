//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/value_set.proto

package value_set_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for ValueSet.
// A set of codes drawn from one or more code systems.
// See http://hl7.org/fhir/StructureDefinition/ValueSet
type ValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Canonical identifier for this value set, represented as a URI (globally
	// unique)
	Url *datatypes_go_proto.Uri `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	// Additional identifier for the value set (business identifier)
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,11,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Business version of the value set
	Version          *datatypes_go_proto.String  `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	VersionAlgorithm *ValueSet_VersionAlgorithmX `protobuf:"bytes,28,opt,name=version_algorithm,json=versionAlgorithm,proto3" json:"version_algorithm,omitempty"`
	// Name for this value set (computer friendly)
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Name for this value set (human friendly)
	Title  *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=title,proto3" json:"title,omitempty"`
	Status *ValueSet_StatusCode       `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// For testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,16,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Date last changed
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=date,proto3" json:"date,omitempty"`
	// Name of the publisher/steward (organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Contact details for the publisher
	Contact []*datatypes_go_proto.ContactDetail `protobuf:"bytes,19,rep,name=contact,proto3" json:"contact,omitempty"`
	// Natural language description of the value set
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	// The context that the content is intended to support
	UseContext []*datatypes_go_proto.UsageContext `protobuf:"bytes,21,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Intended jurisdiction for value set (if applicable)
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// Indicates whether or not any change to the content logical definition may
	// occur
	Immutable *datatypes_go_proto.Boolean `protobuf:"bytes,23,opt,name=immutable,proto3" json:"immutable,omitempty"`
	// Why this value set is defined
	Purpose *datatypes_go_proto.Markdown `protobuf:"bytes,24,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.Markdown `protobuf:"bytes,25,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// Copyright holder and year(s)
	CopyrightLabel *datatypes_go_proto.String `protobuf:"bytes,29,opt,name=copyright_label,json=copyrightLabel,proto3" json:"copyright_label,omitempty"`
	// When the ValueSet was approved by publisher
	ApprovalDate *datatypes_go_proto.Date `protobuf:"bytes,30,opt,name=approval_date,json=approvalDate,proto3" json:"approval_date,omitempty"`
	// When the ValueSet was last reviewed by the publisher
	LastReviewDate *datatypes_go_proto.Date `protobuf:"bytes,31,opt,name=last_review_date,json=lastReviewDate,proto3" json:"last_review_date,omitempty"`
	// When the ValueSet is expected to be used
	EffectivePeriod *datatypes_go_proto.Period `protobuf:"bytes,32,opt,name=effective_period,json=effectivePeriod,proto3" json:"effective_period,omitempty"`
	// E.g. Education, Treatment, Assessment, etc
	Topic []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,33,rep,name=topic,proto3" json:"topic,omitempty"`
	// Who authored the ValueSet
	Author []*datatypes_go_proto.ContactDetail `protobuf:"bytes,34,rep,name=author,proto3" json:"author,omitempty"`
	// Who edited the ValueSet
	Editor []*datatypes_go_proto.ContactDetail `protobuf:"bytes,35,rep,name=editor,proto3" json:"editor,omitempty"`
	// Who reviewed the ValueSet
	Reviewer []*datatypes_go_proto.ContactDetail `protobuf:"bytes,36,rep,name=reviewer,proto3" json:"reviewer,omitempty"`
	// Who endorsed the ValueSet
	Endorser []*datatypes_go_proto.ContactDetail `protobuf:"bytes,37,rep,name=endorser,proto3" json:"endorser,omitempty"`
	// Additional documentation, citations, etc
	RelatedArtifact []*datatypes_go_proto.RelatedArtifact `protobuf:"bytes,38,rep,name=related_artifact,json=relatedArtifact,proto3" json:"related_artifact,omitempty"`
	Compose         *ValueSet_Compose                     `protobuf:"bytes,26,opt,name=compose,proto3" json:"compose,omitempty"`
	Expansion       *ValueSet_Expansion                   `protobuf:"bytes,27,opt,name=expansion,proto3" json:"expansion,omitempty"`
	Scope           *ValueSet_Scope                       `protobuf:"bytes,39,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ValueSet) Reset() {
	*x = ValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet) ProtoMessage() {}

func (x *ValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet.ProtoReflect.Descriptor instead.
func (*ValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0}
}

func (x *ValueSet) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ValueSet) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ValueSet) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ValueSet) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ValueSet) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ValueSet) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ValueSet) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ValueSet) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ValueSet) GetVersionAlgorithm() *ValueSet_VersionAlgorithmX {
	if x != nil {
		return x.VersionAlgorithm
	}
	return nil
}

func (x *ValueSet) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ValueSet) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ValueSet) GetStatus() *ValueSet_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ValueSet) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *ValueSet) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ValueSet) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *ValueSet) GetContact() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *ValueSet) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ValueSet) GetUseContext() []*datatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *ValueSet) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *ValueSet) GetImmutable() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Immutable
	}
	return nil
}

func (x *ValueSet) GetPurpose() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *ValueSet) GetCopyright() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *ValueSet) GetCopyrightLabel() *datatypes_go_proto.String {
	if x != nil {
		return x.CopyrightLabel
	}
	return nil
}

func (x *ValueSet) GetApprovalDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ApprovalDate
	}
	return nil
}

func (x *ValueSet) GetLastReviewDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.LastReviewDate
	}
	return nil
}

func (x *ValueSet) GetEffectivePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.EffectivePeriod
	}
	return nil
}

func (x *ValueSet) GetTopic() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ValueSet) GetAuthor() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ValueSet) GetEditor() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *ValueSet) GetReviewer() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Reviewer
	}
	return nil
}

func (x *ValueSet) GetEndorser() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Endorser
	}
	return nil
}

func (x *ValueSet) GetRelatedArtifact() []*datatypes_go_proto.RelatedArtifact {
	if x != nil {
		return x.RelatedArtifact
	}
	return nil
}

func (x *ValueSet) GetCompose() *ValueSet_Compose {
	if x != nil {
		return x.Compose
	}
	return nil
}

func (x *ValueSet) GetExpansion() *ValueSet_Expansion {
	if x != nil {
		return x.Expansion
	}
	return nil
}

func (x *ValueSet) GetScope() *ValueSet_Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

// How to compare versions
type ValueSet_VersionAlgorithmX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ValueSet_VersionAlgorithmX_StringValue
	//	*ValueSet_VersionAlgorithmX_Coding
	Choice isValueSet_VersionAlgorithmX_Choice `protobuf_oneof:"choice"`
}

func (x *ValueSet_VersionAlgorithmX) Reset() {
	*x = ValueSet_VersionAlgorithmX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_VersionAlgorithmX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_VersionAlgorithmX) ProtoMessage() {}

func (x *ValueSet_VersionAlgorithmX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_VersionAlgorithmX.ProtoReflect.Descriptor instead.
func (*ValueSet_VersionAlgorithmX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ValueSet_VersionAlgorithmX) GetChoice() isValueSet_VersionAlgorithmX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ValueSet_VersionAlgorithmX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*ValueSet_VersionAlgorithmX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ValueSet_VersionAlgorithmX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*ValueSet_VersionAlgorithmX_Coding); ok {
		return x.Coding
	}
	return nil
}

type isValueSet_VersionAlgorithmX_Choice interface {
	isValueSet_VersionAlgorithmX_Choice()
}

type ValueSet_VersionAlgorithmX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type ValueSet_VersionAlgorithmX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,2,opt,name=coding,proto3,oneof"`
}

func (*ValueSet_VersionAlgorithmX_StringValue) isValueSet_VersionAlgorithmX_Choice() {}

func (*ValueSet_VersionAlgorithmX_Coding) isValueSet_VersionAlgorithmX_Choice() {}

// draft | active | retired | unknown
type ValueSet_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.PublicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.PublicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ValueSet_StatusCode) Reset() {
	*x = ValueSet_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_StatusCode) ProtoMessage() {}

func (x *ValueSet_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_StatusCode.ProtoReflect.Descriptor instead.
func (*ValueSet_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ValueSet_StatusCode) GetValue() codes_go_proto.PublicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.PublicationStatusCode_Value(0)
}

func (x *ValueSet_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Content logical definition of the value set (CLD)
type ValueSet_Compose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Fixed date for references with no specified version (transitive)
	LockedDate *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=locked_date,json=lockedDate,proto3" json:"locked_date,omitempty"`
	// Whether inactive codes are in the value set
	Inactive *datatypes_go_proto.Boolean    `protobuf:"bytes,5,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Include  []*ValueSet_Compose_ConceptSet `protobuf:"bytes,6,rep,name=include,proto3" json:"include,omitempty"`
	// Explicitly exclude codes from a code system or other value sets
	Exclude []*ValueSet_Compose_ConceptSet `protobuf:"bytes,7,rep,name=exclude,proto3" json:"exclude,omitempty"`
	// Property to return if client doesn't override
	Property []*datatypes_go_proto.String `protobuf:"bytes,8,rep,name=property,proto3" json:"property,omitempty"`
}

func (x *ValueSet_Compose) Reset() {
	*x = ValueSet_Compose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Compose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Compose) ProtoMessage() {}

func (x *ValueSet_Compose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Compose.ProtoReflect.Descriptor instead.
func (*ValueSet_Compose) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ValueSet_Compose) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Compose) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Compose) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Compose) GetLockedDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.LockedDate
	}
	return nil
}

func (x *ValueSet_Compose) GetInactive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Inactive
	}
	return nil
}

func (x *ValueSet_Compose) GetInclude() []*ValueSet_Compose_ConceptSet {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *ValueSet_Compose) GetExclude() []*ValueSet_Compose_ConceptSet {
	if x != nil {
		return x.Exclude
	}
	return nil
}

func (x *ValueSet_Compose) GetProperty() []*datatypes_go_proto.String {
	if x != nil {
		return x.Property
	}
	return nil
}

// Used when the value set is "expanded"
type ValueSet_Expansion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifies the value set expansion (business identifier)
	Identifier *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Opaque urls for paging through expansion results
	Next *datatypes_go_proto.Uri `protobuf:"bytes,10,opt,name=next,proto3" json:"next,omitempty"`
	// Time ValueSet expansion happened
	Timestamp *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Total number of codes in the expansion
	Total *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=total,proto3" json:"total,omitempty"`
	// Offset at which this resource starts
	Offset    *datatypes_go_proto.Integer     `protobuf:"bytes,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Parameter []*ValueSet_Expansion_Parameter `protobuf:"bytes,8,rep,name=parameter,proto3" json:"parameter,omitempty"`
	Property  []*ValueSet_Expansion_Property  `protobuf:"bytes,11,rep,name=property,proto3" json:"property,omitempty"`
	Contains  []*ValueSet_Expansion_Contains  `protobuf:"bytes,9,rep,name=contains,proto3" json:"contains,omitempty"`
}

func (x *ValueSet_Expansion) Reset() {
	*x = ValueSet_Expansion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion) ProtoMessage() {}

func (x *ValueSet_Expansion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ValueSet_Expansion) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Expansion) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Expansion) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Expansion) GetIdentifier() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ValueSet_Expansion) GetNext() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *ValueSet_Expansion) GetTimestamp() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ValueSet_Expansion) GetTotal() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *ValueSet_Expansion) GetOffset() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ValueSet_Expansion) GetParameter() []*ValueSet_Expansion_Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *ValueSet_Expansion) GetProperty() []*ValueSet_Expansion_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *ValueSet_Expansion) GetContains() []*ValueSet_Expansion_Contains {
	if x != nil {
		return x.Contains
	}
	return nil
}

// Description of the semantic space the Value Set Expansion is intended to
// cover and should further clarify the text in ValueSet.description
type ValueSet_Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Criteria describing which concepts or codes should be included and why
	InclusionCriteria *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=inclusion_criteria,json=inclusionCriteria,proto3" json:"inclusion_criteria,omitempty"`
	// Criteria describing which concepts or codes should be excluded and why
	ExclusionCriteria *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=exclusion_criteria,json=exclusionCriteria,proto3" json:"exclusion_criteria,omitempty"`
}

func (x *ValueSet_Scope) Reset() {
	*x = ValueSet_Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Scope) ProtoMessage() {}

func (x *ValueSet_Scope) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Scope.ProtoReflect.Descriptor instead.
func (*ValueSet_Scope) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ValueSet_Scope) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Scope) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Scope) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Scope) GetInclusionCriteria() *datatypes_go_proto.String {
	if x != nil {
		return x.InclusionCriteria
	}
	return nil
}

func (x *ValueSet_Scope) GetExclusionCriteria() *datatypes_go_proto.String {
	if x != nil {
		return x.ExclusionCriteria
	}
	return nil
}

// Include one or more codes from a code system or other value set(s)
type ValueSet_Compose_ConceptSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The system the codes come from
	System *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=system,proto3" json:"system,omitempty"`
	// Specific version of the code system referred to
	Version *datatypes_go_proto.String                      `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Concept []*ValueSet_Compose_ConceptSet_ConceptReference `protobuf:"bytes,6,rep,name=concept,proto3" json:"concept,omitempty"`
	Filter  []*ValueSet_Compose_ConceptSet_Filter           `protobuf:"bytes,7,rep,name=filter,proto3" json:"filter,omitempty"`
	// Select the contents included in this value set
	ValueSet []*datatypes_go_proto.Canonical `protobuf:"bytes,8,rep,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
	// A copyright statement for the specific code system included in the
	// value set
	Copyright *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=copyright,proto3" json:"copyright,omitempty"`
}

func (x *ValueSet_Compose_ConceptSet) Reset() {
	*x = ValueSet_Compose_ConceptSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Compose_ConceptSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Compose_ConceptSet) ProtoMessage() {}

func (x *ValueSet_Compose_ConceptSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Compose_ConceptSet.ProtoReflect.Descriptor instead.
func (*ValueSet_Compose_ConceptSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *ValueSet_Compose_ConceptSet) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet) GetSystem() *datatypes_go_proto.Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet) GetConcept() []*ValueSet_Compose_ConceptSet_ConceptReference {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet) GetFilter() []*ValueSet_Compose_ConceptSet_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet) GetValueSet() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet) GetCopyright() *datatypes_go_proto.String {
	if x != nil {
		return x.Copyright
	}
	return nil
}

// A concept defined in the system
type ValueSet_Compose_ConceptSet_ConceptReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code or expression from system
	Code *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Text to display for this code for this value set in this valueset
	Display     *datatypes_go_proto.String                                  `protobuf:"bytes,5,opt,name=display,proto3" json:"display,omitempty"`
	Designation []*ValueSet_Compose_ConceptSet_ConceptReference_Designation `protobuf:"bytes,6,rep,name=designation,proto3" json:"designation,omitempty"`
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference) Reset() {
	*x = ValueSet_Compose_ConceptSet_ConceptReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Compose_ConceptSet_ConceptReference) ProtoMessage() {}

func (x *ValueSet_Compose_ConceptSet_ConceptReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Compose_ConceptSet_ConceptReference.ProtoReflect.Descriptor instead.
func (*ValueSet_Compose_ConceptSet_ConceptReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference) GetDesignation() []*ValueSet_Compose_ConceptSet_ConceptReference_Designation {
	if x != nil {
		return x.Designation
	}
	return nil
}

// Select codes/concepts by their properties (including relationships)
type ValueSet_Compose_ConceptSet_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A property/filter defined by the code system
	Property *datatypes_go_proto.Code                   `protobuf:"bytes,4,opt,name=property,proto3" json:"property,omitempty"`
	Op       *ValueSet_Compose_ConceptSet_Filter_OpCode `protobuf:"bytes,5,opt,name=op,proto3" json:"op,omitempty"`
	// Code from the system, or regex criteria, or boolean value for exists
	Value *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValueSet_Compose_ConceptSet_Filter) Reset() {
	*x = ValueSet_Compose_ConceptSet_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Compose_ConceptSet_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Compose_ConceptSet_Filter) ProtoMessage() {}

func (x *ValueSet_Compose_ConceptSet_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Compose_ConceptSet_Filter.ProtoReflect.Descriptor instead.
func (*ValueSet_Compose_ConceptSet_Filter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

func (x *ValueSet_Compose_ConceptSet_Filter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_Filter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_Filter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_Filter) GetProperty() *datatypes_go_proto.Code {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_Filter) GetOp() *ValueSet_Compose_ConceptSet_Filter_OpCode {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_Filter) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// Additional representations for this concept
type ValueSet_Compose_ConceptSet_ConceptReference_Designation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Human language of the designation
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Types of uses of designations
	Use *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
	// Additional ways how this designation would be used
	AdditionalUse []*datatypes_go_proto.Coding `protobuf:"bytes,7,rep,name=additional_use,json=additionalUse,proto3" json:"additional_use,omitempty"`
	// The text value for this designation
	Value *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference_Designation) Reset() {
	*x = ValueSet_Compose_ConceptSet_ConceptReference_Designation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference_Designation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Compose_ConceptSet_ConceptReference_Designation) ProtoMessage() {}

func (x *ValueSet_Compose_ConceptSet_ConceptReference_Designation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Compose_ConceptSet_ConceptReference_Designation.ProtoReflect.Descriptor instead.
func (*ValueSet_Compose_ConceptSet_ConceptReference_Designation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0}
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference_Designation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference_Designation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference_Designation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference_Designation) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference_Designation) GetUse() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference_Designation) GetAdditionalUse() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.AdditionalUse
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_ConceptReference_Designation) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// = | is-a | descendent-of | is-not-a | regex | in | not-in |
// generalizes | child-of | descendent-leaf | exists
type ValueSet_Compose_ConceptSet_Filter_OpCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FilterOperatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.FilterOperatorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ValueSet_Compose_ConceptSet_Filter_OpCode) Reset() {
	*x = ValueSet_Compose_ConceptSet_Filter_OpCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Compose_ConceptSet_Filter_OpCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Compose_ConceptSet_Filter_OpCode) ProtoMessage() {}

func (x *ValueSet_Compose_ConceptSet_Filter_OpCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Compose_ConceptSet_Filter_OpCode.ProtoReflect.Descriptor instead.
func (*ValueSet_Compose_ConceptSet_Filter_OpCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 2, 0, 1, 0}
}

func (x *ValueSet_Compose_ConceptSet_Filter_OpCode) GetValue() codes_go_proto.FilterOperatorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FilterOperatorCode_Value(0)
}

func (x *ValueSet_Compose_ConceptSet_Filter_OpCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Compose_ConceptSet_Filter_OpCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Parameter that controlled the expansion process
type ValueSet_Expansion_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name as assigned by the client or server
	Name  *datatypes_go_proto.String           `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Value *ValueSet_Expansion_Parameter_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValueSet_Expansion_Parameter) Reset() {
	*x = ValueSet_Expansion_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion_Parameter) ProtoMessage() {}

func (x *ValueSet_Expansion_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion_Parameter.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion_Parameter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *ValueSet_Expansion_Parameter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter) GetValue() *ValueSet_Expansion_Parameter_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Additional information supplied about each concept
type ValueSet_Expansion_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifies the property on the concepts, and when referred to in
	// operations
	Code *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Formal identifier for the property
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *ValueSet_Expansion_Property) Reset() {
	*x = ValueSet_Expansion_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion_Property) ProtoMessage() {}

func (x *ValueSet_Expansion_Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion_Property.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion_Property) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *ValueSet_Expansion_Property) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Expansion_Property) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Expansion_Property) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Expansion_Property) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ValueSet_Expansion_Property) GetUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Uri
	}
	return nil
}

// Codes in the value set
type ValueSet_Expansion_Contains struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// System value for the code
	System *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=system,proto3" json:"system,omitempty"`
	// If user cannot select this entry
	Abstract *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=abstract,proto3" json:"abstract,omitempty"`
	// If concept is inactive in the code system
	Inactive *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Version in which this code/display is defined
	Version *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	// Code - if blank, this is not a selectable code
	Code *datatypes_go_proto.Code `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`
	// User display for the concept
	Display *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=display,proto3" json:"display,omitempty"`
	// Additional representations for this item
	Designation []*ValueSet_Compose_ConceptSet_ConceptReference_Designation `protobuf:"bytes,10,rep,name=designation,proto3" json:"designation,omitempty"`
	Property    []*ValueSet_Expansion_Contains_ConceptProperty              `protobuf:"bytes,12,rep,name=property,proto3" json:"property,omitempty"`
	// Codes contained under this entry
	Contains []*ValueSet_Expansion_Contains `protobuf:"bytes,11,rep,name=contains,proto3" json:"contains,omitempty"`
}

func (x *ValueSet_Expansion_Contains) Reset() {
	*x = ValueSet_Expansion_Contains{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion_Contains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion_Contains) ProtoMessage() {}

func (x *ValueSet_Expansion_Contains) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion_Contains.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion_Contains) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *ValueSet_Expansion_Contains) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetSystem() *datatypes_go_proto.Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetAbstract() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Abstract
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetInactive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Inactive
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetDesignation() []*ValueSet_Compose_ConceptSet_ConceptReference_Designation {
	if x != nil {
		return x.Designation
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetProperty() []*ValueSet_Expansion_Contains_ConceptProperty {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetContains() []*ValueSet_Expansion_Contains {
	if x != nil {
		return x.Contains
	}
	return nil
}

// Value of the named parameter
type ValueSet_Expansion_Parameter_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ValueSet_Expansion_Parameter_ValueX_StringValue
	//	*ValueSet_Expansion_Parameter_ValueX_Boolean
	//	*ValueSet_Expansion_Parameter_ValueX_Integer
	//	*ValueSet_Expansion_Parameter_ValueX_Decimal
	//	*ValueSet_Expansion_Parameter_ValueX_Uri
	//	*ValueSet_Expansion_Parameter_ValueX_Code
	//	*ValueSet_Expansion_Parameter_ValueX_DateTime
	Choice isValueSet_Expansion_Parameter_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *ValueSet_Expansion_Parameter_ValueX) Reset() {
	*x = ValueSet_Expansion_Parameter_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion_Parameter_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion_Parameter_ValueX) ProtoMessage() {}

func (x *ValueSet_Expansion_Parameter_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion_Parameter_ValueX.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion_Parameter_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (m *ValueSet_Expansion_Parameter_ValueX) GetChoice() isValueSet_Expansion_Parameter_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Parameter_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Parameter_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Parameter_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_ValueX) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Parameter_ValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_ValueX) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Parameter_ValueX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_ValueX) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Parameter_ValueX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Parameter_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isValueSet_Expansion_Parameter_ValueX_Choice interface {
	isValueSet_Expansion_Parameter_ValueX_Choice()
}

type ValueSet_Expansion_Parameter_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type ValueSet_Expansion_Parameter_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ValueSet_Expansion_Parameter_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=integer,proto3,oneof"`
}

type ValueSet_Expansion_Parameter_ValueX_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,4,opt,name=decimal,proto3,oneof"`
}

type ValueSet_Expansion_Parameter_ValueX_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=uri,proto3,oneof"`
}

type ValueSet_Expansion_Parameter_ValueX_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,6,opt,name=code,proto3,oneof"`
}

type ValueSet_Expansion_Parameter_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,7,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*ValueSet_Expansion_Parameter_ValueX_StringValue) isValueSet_Expansion_Parameter_ValueX_Choice() {
}

func (*ValueSet_Expansion_Parameter_ValueX_Boolean) isValueSet_Expansion_Parameter_ValueX_Choice() {}

func (*ValueSet_Expansion_Parameter_ValueX_Integer) isValueSet_Expansion_Parameter_ValueX_Choice() {}

func (*ValueSet_Expansion_Parameter_ValueX_Decimal) isValueSet_Expansion_Parameter_ValueX_Choice() {}

func (*ValueSet_Expansion_Parameter_ValueX_Uri) isValueSet_Expansion_Parameter_ValueX_Choice() {}

func (*ValueSet_Expansion_Parameter_ValueX_Code) isValueSet_Expansion_Parameter_ValueX_Choice() {}

func (*ValueSet_Expansion_Parameter_ValueX_DateTime) isValueSet_Expansion_Parameter_ValueX_Choice() {}

// Property value for the concept
type ValueSet_Expansion_Contains_ConceptProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reference to ValueSet.expansion.property.code
	Code        *datatypes_go_proto.Code                                          `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value       *ValueSet_Expansion_Contains_ConceptProperty_ValueX               `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	SubProperty []*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty `protobuf:"bytes,6,rep,name=sub_property,json=subProperty,proto3" json:"sub_property,omitempty"`
}

func (x *ValueSet_Expansion_Contains_ConceptProperty) Reset() {
	*x = ValueSet_Expansion_Contains_ConceptProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion_Contains_ConceptProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion_Contains_ConceptProperty) ProtoMessage() {}

func (x *ValueSet_Expansion_Contains_ConceptProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion_Contains_ConceptProperty.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion_Contains_ConceptProperty) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 3, 2, 0}
}

func (x *ValueSet_Expansion_Contains_ConceptProperty) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty) GetValue() *ValueSet_Expansion_Contains_ConceptProperty_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty) GetSubProperty() []*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty {
	if x != nil {
		return x.SubProperty
	}
	return nil
}

// Value of the property for this concept
type ValueSet_Expansion_Contains_ConceptProperty_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Code
	//	*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Coding
	//	*ValueSet_Expansion_Contains_ConceptProperty_ValueX_StringValue
	//	*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Integer
	//	*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Boolean
	//	*ValueSet_Expansion_Contains_ConceptProperty_ValueX_DateTime
	//	*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Decimal
	Choice isValueSet_Expansion_Contains_ConceptProperty_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ValueX) Reset() {
	*x = ValueSet_Expansion_Contains_ConceptProperty_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ValueX) ProtoMessage() {}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion_Contains_ConceptProperty_ValueX.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion_Contains_ConceptProperty_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 3, 2, 0, 0}
}

func (m *ValueSet_Expansion_Contains_ConceptProperty_ValueX) GetChoice() isValueSet_Expansion_Contains_ConceptProperty_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ValueX) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ValueX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ValueX) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

type isValueSet_Expansion_Contains_ConceptProperty_ValueX_Choice interface {
	isValueSet_Expansion_Contains_ConceptProperty_ValueX_Choice()
}

type ValueSet_Expansion_Contains_ConceptProperty_ValueX_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,1,opt,name=code,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ValueX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,2,opt,name=coding,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=integer,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=boolean,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ValueX_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,7,opt,name=decimal,proto3,oneof"`
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Code) isValueSet_Expansion_Contains_ConceptProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Coding) isValueSet_Expansion_Contains_ConceptProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ValueX_StringValue) isValueSet_Expansion_Contains_ConceptProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Integer) isValueSet_Expansion_Contains_ConceptProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Boolean) isValueSet_Expansion_Contains_ConceptProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ValueX_DateTime) isValueSet_Expansion_Contains_ConceptProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Decimal) isValueSet_Expansion_Contains_ConceptProperty_ValueX_Choice() {
}

// SubProperty value for the concept
type ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reference to ValueSet.expansion.property.code
	Code  *datatypes_go_proto.Code                                               `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty) Reset() {
	*x = ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty) ProtoMessage() {}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 3, 2, 0, 1}
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty) GetValue() *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Value of the subproperty for this concept
type ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Code
	//	*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Coding
	//	*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_StringValue
	//	*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Integer
	//	*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Boolean
	//	*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_DateTime
	//	*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Decimal
	Choice isValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) Reset() {
	*x = ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) ProtoMessage() {}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP(), []int{0, 3, 2, 0, 1, 0}
}

func (m *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) GetChoice() isValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetChoice().(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

type isValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Choice interface {
	isValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Choice()
}

type ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,1,opt,name=code,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,2,opt,name=coding,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=integer,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=boolean,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,7,opt,name=decimal,proto3,oneof"`
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Code) isValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Coding) isValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_StringValue) isValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Integer) isValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Boolean) isValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_DateTime) isValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Choice() {
}

func (*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Decimal) isValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_value_set_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDesc = []byte{
	0x0a, 0x39, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x53, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x2b, 0xf2,
	0xb9, 0xe4, 0xa3, 0x0b, 0x25, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e,
	0x5b, 0x5e, 0x7c, 0x23, 0x20, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x58, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x07,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a,
	0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3a, 0x0a,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x73, 0x65, 0x72, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x26, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x65,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x99, 0x01,
	0x0a, 0x11, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x58, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xcf, 0x16, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x52, 0x07, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a,
	0xba, 0x12, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4f,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x09,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x8d, 0x07, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x6f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xdf, 0x03, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x31, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2b, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x75, 0x73, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x1a, 0xbb, 0x05, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa4,
	0x02, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6a, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x94, 0x01, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x24, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x3d, 0x28, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x20, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x21, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x1a, 0xc6, 0x22, 0x0a,
	0x09, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x1a, 0xf3, 0x05, 0x0a, 0x09, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa2, 0x03, 0x0a, 0x06, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12,
	0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2f, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa7,
	0x02, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x69, 0x1a, 0xda, 0x14, 0x0a, 0x08, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x6f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x4c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x1a,
	0xbf, 0x0d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x65, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x76, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x53, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x75, 0x62, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x1a, 0xab, 0x03, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x2f,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0xad, 0x06, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x75, 0x62,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x78, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xab, 0x03, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x2f,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x3a, 0x72, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x21, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x3d, 0x20, 0x74, 0x72, 0x75, 0x65,
	0x9a, 0x86, 0x93, 0xa0, 0x08, 0x1f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x1a, 0xd9, 0x02, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x4a, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x9a, 0xaf, 0xae, 0xa4, 0x0b, 0x42, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x28, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x29, 0x7b, 0x31,
	0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0x27, 0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x79,
	0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50,
	0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_proto_google_fhir_proto_r5_core_resources_value_set_proto_goTypes = []interface{}{
	(*ValueSet)(nil),                                                              // 0: google.fhir.r5.core.ValueSet
	(*ValueSet_VersionAlgorithmX)(nil),                                            // 1: google.fhir.r5.core.ValueSet.VersionAlgorithmX
	(*ValueSet_StatusCode)(nil),                                                   // 2: google.fhir.r5.core.ValueSet.StatusCode
	(*ValueSet_Compose)(nil),                                                      // 3: google.fhir.r5.core.ValueSet.Compose
	(*ValueSet_Expansion)(nil),                                                    // 4: google.fhir.r5.core.ValueSet.Expansion
	(*ValueSet_Scope)(nil),                                                        // 5: google.fhir.r5.core.ValueSet.Scope
	(*ValueSet_Compose_ConceptSet)(nil),                                           // 6: google.fhir.r5.core.ValueSet.Compose.ConceptSet
	(*ValueSet_Compose_ConceptSet_ConceptReference)(nil),                          // 7: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference
	(*ValueSet_Compose_ConceptSet_Filter)(nil),                                    // 8: google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter
	(*ValueSet_Compose_ConceptSet_ConceptReference_Designation)(nil),              // 9: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.Designation
	(*ValueSet_Compose_ConceptSet_Filter_OpCode)(nil),                             // 10: google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter.OpCode
	(*ValueSet_Expansion_Parameter)(nil),                                          // 11: google.fhir.r5.core.ValueSet.Expansion.Parameter
	(*ValueSet_Expansion_Property)(nil),                                           // 12: google.fhir.r5.core.ValueSet.Expansion.Property
	(*ValueSet_Expansion_Contains)(nil),                                           // 13: google.fhir.r5.core.ValueSet.Expansion.Contains
	(*ValueSet_Expansion_Parameter_ValueX)(nil),                                   // 14: google.fhir.r5.core.ValueSet.Expansion.Parameter.ValueX
	(*ValueSet_Expansion_Contains_ConceptProperty)(nil),                           // 15: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty
	(*ValueSet_Expansion_Contains_ConceptProperty_ValueX)(nil),                    // 16: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ValueX
	(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty)(nil),        // 17: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty
	(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX)(nil), // 18: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.ValueX
	(*datatypes_go_proto.Id)(nil),                                                 // 19: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                               // 20: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                                // 21: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                               // 22: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                          // 23: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                                             // 24: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                          // 25: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                         // 26: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.String)(nil),                                             // 27: google.fhir.r5.core.String
	(*datatypes_go_proto.Boolean)(nil),                                            // 28: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.DateTime)(nil),                                           // 29: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.ContactDetail)(nil),                                      // 30: google.fhir.r5.core.ContactDetail
	(*datatypes_go_proto.Markdown)(nil),                                           // 31: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.UsageContext)(nil),                                       // 32: google.fhir.r5.core.UsageContext
	(*datatypes_go_proto.CodeableConcept)(nil),                                    // 33: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Date)(nil),                                               // 34: google.fhir.r5.core.Date
	(*datatypes_go_proto.Period)(nil),                                             // 35: google.fhir.r5.core.Period
	(*datatypes_go_proto.RelatedArtifact)(nil),                                    // 36: google.fhir.r5.core.RelatedArtifact
	(*datatypes_go_proto.Coding)(nil),                                             // 37: google.fhir.r5.core.Coding
	(codes_go_proto.PublicationStatusCode_Value)(0),                               // 38: google.fhir.r5.core.PublicationStatusCode.Value
	(*datatypes_go_proto.Integer)(nil),                                            // 39: google.fhir.r5.core.Integer
	(*datatypes_go_proto.Canonical)(nil),                                          // 40: google.fhir.r5.core.Canonical
	(codes_go_proto.FilterOperatorCode_Value)(0),                                  // 41: google.fhir.r5.core.FilterOperatorCode.Value
	(*datatypes_go_proto.Decimal)(nil),                                            // 42: google.fhir.r5.core.Decimal
}
var file_proto_google_fhir_proto_r5_core_resources_value_set_proto_depIdxs = []int32{
	19,  // 0: google.fhir.r5.core.ValueSet.id:type_name -> google.fhir.r5.core.Id
	20,  // 1: google.fhir.r5.core.ValueSet.meta:type_name -> google.fhir.r5.core.Meta
	21,  // 2: google.fhir.r5.core.ValueSet.implicit_rules:type_name -> google.fhir.r5.core.Uri
	22,  // 3: google.fhir.r5.core.ValueSet.language:type_name -> google.fhir.r5.core.Code
	23,  // 4: google.fhir.r5.core.ValueSet.text:type_name -> google.fhir.r5.core.Narrative
	24,  // 5: google.fhir.r5.core.ValueSet.contained:type_name -> google.protobuf.Any
	25,  // 6: google.fhir.r5.core.ValueSet.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 7: google.fhir.r5.core.ValueSet.modifier_extension:type_name -> google.fhir.r5.core.Extension
	21,  // 8: google.fhir.r5.core.ValueSet.url:type_name -> google.fhir.r5.core.Uri
	26,  // 9: google.fhir.r5.core.ValueSet.identifier:type_name -> google.fhir.r5.core.Identifier
	27,  // 10: google.fhir.r5.core.ValueSet.version:type_name -> google.fhir.r5.core.String
	1,   // 11: google.fhir.r5.core.ValueSet.version_algorithm:type_name -> google.fhir.r5.core.ValueSet.VersionAlgorithmX
	27,  // 12: google.fhir.r5.core.ValueSet.name:type_name -> google.fhir.r5.core.String
	27,  // 13: google.fhir.r5.core.ValueSet.title:type_name -> google.fhir.r5.core.String
	2,   // 14: google.fhir.r5.core.ValueSet.status:type_name -> google.fhir.r5.core.ValueSet.StatusCode
	28,  // 15: google.fhir.r5.core.ValueSet.experimental:type_name -> google.fhir.r5.core.Boolean
	29,  // 16: google.fhir.r5.core.ValueSet.date:type_name -> google.fhir.r5.core.DateTime
	27,  // 17: google.fhir.r5.core.ValueSet.publisher:type_name -> google.fhir.r5.core.String
	30,  // 18: google.fhir.r5.core.ValueSet.contact:type_name -> google.fhir.r5.core.ContactDetail
	31,  // 19: google.fhir.r5.core.ValueSet.description:type_name -> google.fhir.r5.core.Markdown
	32,  // 20: google.fhir.r5.core.ValueSet.use_context:type_name -> google.fhir.r5.core.UsageContext
	33,  // 21: google.fhir.r5.core.ValueSet.jurisdiction:type_name -> google.fhir.r5.core.CodeableConcept
	28,  // 22: google.fhir.r5.core.ValueSet.immutable:type_name -> google.fhir.r5.core.Boolean
	31,  // 23: google.fhir.r5.core.ValueSet.purpose:type_name -> google.fhir.r5.core.Markdown
	31,  // 24: google.fhir.r5.core.ValueSet.copyright:type_name -> google.fhir.r5.core.Markdown
	27,  // 25: google.fhir.r5.core.ValueSet.copyright_label:type_name -> google.fhir.r5.core.String
	34,  // 26: google.fhir.r5.core.ValueSet.approval_date:type_name -> google.fhir.r5.core.Date
	34,  // 27: google.fhir.r5.core.ValueSet.last_review_date:type_name -> google.fhir.r5.core.Date
	35,  // 28: google.fhir.r5.core.ValueSet.effective_period:type_name -> google.fhir.r5.core.Period
	33,  // 29: google.fhir.r5.core.ValueSet.topic:type_name -> google.fhir.r5.core.CodeableConcept
	30,  // 30: google.fhir.r5.core.ValueSet.author:type_name -> google.fhir.r5.core.ContactDetail
	30,  // 31: google.fhir.r5.core.ValueSet.editor:type_name -> google.fhir.r5.core.ContactDetail
	30,  // 32: google.fhir.r5.core.ValueSet.reviewer:type_name -> google.fhir.r5.core.ContactDetail
	30,  // 33: google.fhir.r5.core.ValueSet.endorser:type_name -> google.fhir.r5.core.ContactDetail
	36,  // 34: google.fhir.r5.core.ValueSet.related_artifact:type_name -> google.fhir.r5.core.RelatedArtifact
	3,   // 35: google.fhir.r5.core.ValueSet.compose:type_name -> google.fhir.r5.core.ValueSet.Compose
	4,   // 36: google.fhir.r5.core.ValueSet.expansion:type_name -> google.fhir.r5.core.ValueSet.Expansion
	5,   // 37: google.fhir.r5.core.ValueSet.scope:type_name -> google.fhir.r5.core.ValueSet.Scope
	27,  // 38: google.fhir.r5.core.ValueSet.VersionAlgorithmX.string_value:type_name -> google.fhir.r5.core.String
	37,  // 39: google.fhir.r5.core.ValueSet.VersionAlgorithmX.coding:type_name -> google.fhir.r5.core.Coding
	38,  // 40: google.fhir.r5.core.ValueSet.StatusCode.value:type_name -> google.fhir.r5.core.PublicationStatusCode.Value
	27,  // 41: google.fhir.r5.core.ValueSet.StatusCode.id:type_name -> google.fhir.r5.core.String
	25,  // 42: google.fhir.r5.core.ValueSet.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	27,  // 43: google.fhir.r5.core.ValueSet.Compose.id:type_name -> google.fhir.r5.core.String
	25,  // 44: google.fhir.r5.core.ValueSet.Compose.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 45: google.fhir.r5.core.ValueSet.Compose.modifier_extension:type_name -> google.fhir.r5.core.Extension
	34,  // 46: google.fhir.r5.core.ValueSet.Compose.locked_date:type_name -> google.fhir.r5.core.Date
	28,  // 47: google.fhir.r5.core.ValueSet.Compose.inactive:type_name -> google.fhir.r5.core.Boolean
	6,   // 48: google.fhir.r5.core.ValueSet.Compose.include:type_name -> google.fhir.r5.core.ValueSet.Compose.ConceptSet
	6,   // 49: google.fhir.r5.core.ValueSet.Compose.exclude:type_name -> google.fhir.r5.core.ValueSet.Compose.ConceptSet
	27,  // 50: google.fhir.r5.core.ValueSet.Compose.property:type_name -> google.fhir.r5.core.String
	27,  // 51: google.fhir.r5.core.ValueSet.Expansion.id:type_name -> google.fhir.r5.core.String
	25,  // 52: google.fhir.r5.core.ValueSet.Expansion.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 53: google.fhir.r5.core.ValueSet.Expansion.modifier_extension:type_name -> google.fhir.r5.core.Extension
	21,  // 54: google.fhir.r5.core.ValueSet.Expansion.identifier:type_name -> google.fhir.r5.core.Uri
	21,  // 55: google.fhir.r5.core.ValueSet.Expansion.next:type_name -> google.fhir.r5.core.Uri
	29,  // 56: google.fhir.r5.core.ValueSet.Expansion.timestamp:type_name -> google.fhir.r5.core.DateTime
	39,  // 57: google.fhir.r5.core.ValueSet.Expansion.total:type_name -> google.fhir.r5.core.Integer
	39,  // 58: google.fhir.r5.core.ValueSet.Expansion.offset:type_name -> google.fhir.r5.core.Integer
	11,  // 59: google.fhir.r5.core.ValueSet.Expansion.parameter:type_name -> google.fhir.r5.core.ValueSet.Expansion.Parameter
	12,  // 60: google.fhir.r5.core.ValueSet.Expansion.property:type_name -> google.fhir.r5.core.ValueSet.Expansion.Property
	13,  // 61: google.fhir.r5.core.ValueSet.Expansion.contains:type_name -> google.fhir.r5.core.ValueSet.Expansion.Contains
	27,  // 62: google.fhir.r5.core.ValueSet.Scope.id:type_name -> google.fhir.r5.core.String
	25,  // 63: google.fhir.r5.core.ValueSet.Scope.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 64: google.fhir.r5.core.ValueSet.Scope.modifier_extension:type_name -> google.fhir.r5.core.Extension
	27,  // 65: google.fhir.r5.core.ValueSet.Scope.inclusion_criteria:type_name -> google.fhir.r5.core.String
	27,  // 66: google.fhir.r5.core.ValueSet.Scope.exclusion_criteria:type_name -> google.fhir.r5.core.String
	27,  // 67: google.fhir.r5.core.ValueSet.Compose.ConceptSet.id:type_name -> google.fhir.r5.core.String
	25,  // 68: google.fhir.r5.core.ValueSet.Compose.ConceptSet.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 69: google.fhir.r5.core.ValueSet.Compose.ConceptSet.modifier_extension:type_name -> google.fhir.r5.core.Extension
	21,  // 70: google.fhir.r5.core.ValueSet.Compose.ConceptSet.system:type_name -> google.fhir.r5.core.Uri
	27,  // 71: google.fhir.r5.core.ValueSet.Compose.ConceptSet.version:type_name -> google.fhir.r5.core.String
	7,   // 72: google.fhir.r5.core.ValueSet.Compose.ConceptSet.concept:type_name -> google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference
	8,   // 73: google.fhir.r5.core.ValueSet.Compose.ConceptSet.filter:type_name -> google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter
	40,  // 74: google.fhir.r5.core.ValueSet.Compose.ConceptSet.value_set:type_name -> google.fhir.r5.core.Canonical
	27,  // 75: google.fhir.r5.core.ValueSet.Compose.ConceptSet.copyright:type_name -> google.fhir.r5.core.String
	27,  // 76: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.id:type_name -> google.fhir.r5.core.String
	25,  // 77: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 78: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.modifier_extension:type_name -> google.fhir.r5.core.Extension
	22,  // 79: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.code:type_name -> google.fhir.r5.core.Code
	27,  // 80: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.display:type_name -> google.fhir.r5.core.String
	9,   // 81: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.designation:type_name -> google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.Designation
	27,  // 82: google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter.id:type_name -> google.fhir.r5.core.String
	25,  // 83: google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 84: google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter.modifier_extension:type_name -> google.fhir.r5.core.Extension
	22,  // 85: google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter.property:type_name -> google.fhir.r5.core.Code
	10,  // 86: google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter.op:type_name -> google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter.OpCode
	27,  // 87: google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter.value:type_name -> google.fhir.r5.core.String
	27,  // 88: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.Designation.id:type_name -> google.fhir.r5.core.String
	25,  // 89: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.Designation.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 90: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.Designation.modifier_extension:type_name -> google.fhir.r5.core.Extension
	22,  // 91: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.Designation.language:type_name -> google.fhir.r5.core.Code
	37,  // 92: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.Designation.use:type_name -> google.fhir.r5.core.Coding
	37,  // 93: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.Designation.additional_use:type_name -> google.fhir.r5.core.Coding
	27,  // 94: google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.Designation.value:type_name -> google.fhir.r5.core.String
	41,  // 95: google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter.OpCode.value:type_name -> google.fhir.r5.core.FilterOperatorCode.Value
	27,  // 96: google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter.OpCode.id:type_name -> google.fhir.r5.core.String
	25,  // 97: google.fhir.r5.core.ValueSet.Compose.ConceptSet.Filter.OpCode.extension:type_name -> google.fhir.r5.core.Extension
	27,  // 98: google.fhir.r5.core.ValueSet.Expansion.Parameter.id:type_name -> google.fhir.r5.core.String
	25,  // 99: google.fhir.r5.core.ValueSet.Expansion.Parameter.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 100: google.fhir.r5.core.ValueSet.Expansion.Parameter.modifier_extension:type_name -> google.fhir.r5.core.Extension
	27,  // 101: google.fhir.r5.core.ValueSet.Expansion.Parameter.name:type_name -> google.fhir.r5.core.String
	14,  // 102: google.fhir.r5.core.ValueSet.Expansion.Parameter.value:type_name -> google.fhir.r5.core.ValueSet.Expansion.Parameter.ValueX
	27,  // 103: google.fhir.r5.core.ValueSet.Expansion.Property.id:type_name -> google.fhir.r5.core.String
	25,  // 104: google.fhir.r5.core.ValueSet.Expansion.Property.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 105: google.fhir.r5.core.ValueSet.Expansion.Property.modifier_extension:type_name -> google.fhir.r5.core.Extension
	22,  // 106: google.fhir.r5.core.ValueSet.Expansion.Property.code:type_name -> google.fhir.r5.core.Code
	21,  // 107: google.fhir.r5.core.ValueSet.Expansion.Property.uri:type_name -> google.fhir.r5.core.Uri
	27,  // 108: google.fhir.r5.core.ValueSet.Expansion.Contains.id:type_name -> google.fhir.r5.core.String
	25,  // 109: google.fhir.r5.core.ValueSet.Expansion.Contains.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 110: google.fhir.r5.core.ValueSet.Expansion.Contains.modifier_extension:type_name -> google.fhir.r5.core.Extension
	21,  // 111: google.fhir.r5.core.ValueSet.Expansion.Contains.system:type_name -> google.fhir.r5.core.Uri
	28,  // 112: google.fhir.r5.core.ValueSet.Expansion.Contains.abstract:type_name -> google.fhir.r5.core.Boolean
	28,  // 113: google.fhir.r5.core.ValueSet.Expansion.Contains.inactive:type_name -> google.fhir.r5.core.Boolean
	27,  // 114: google.fhir.r5.core.ValueSet.Expansion.Contains.version:type_name -> google.fhir.r5.core.String
	22,  // 115: google.fhir.r5.core.ValueSet.Expansion.Contains.code:type_name -> google.fhir.r5.core.Code
	27,  // 116: google.fhir.r5.core.ValueSet.Expansion.Contains.display:type_name -> google.fhir.r5.core.String
	9,   // 117: google.fhir.r5.core.ValueSet.Expansion.Contains.designation:type_name -> google.fhir.r5.core.ValueSet.Compose.ConceptSet.ConceptReference.Designation
	15,  // 118: google.fhir.r5.core.ValueSet.Expansion.Contains.property:type_name -> google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty
	13,  // 119: google.fhir.r5.core.ValueSet.Expansion.Contains.contains:type_name -> google.fhir.r5.core.ValueSet.Expansion.Contains
	27,  // 120: google.fhir.r5.core.ValueSet.Expansion.Parameter.ValueX.string_value:type_name -> google.fhir.r5.core.String
	28,  // 121: google.fhir.r5.core.ValueSet.Expansion.Parameter.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	39,  // 122: google.fhir.r5.core.ValueSet.Expansion.Parameter.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	42,  // 123: google.fhir.r5.core.ValueSet.Expansion.Parameter.ValueX.decimal:type_name -> google.fhir.r5.core.Decimal
	21,  // 124: google.fhir.r5.core.ValueSet.Expansion.Parameter.ValueX.uri:type_name -> google.fhir.r5.core.Uri
	22,  // 125: google.fhir.r5.core.ValueSet.Expansion.Parameter.ValueX.code:type_name -> google.fhir.r5.core.Code
	29,  // 126: google.fhir.r5.core.ValueSet.Expansion.Parameter.ValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	27,  // 127: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.id:type_name -> google.fhir.r5.core.String
	25,  // 128: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 129: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.modifier_extension:type_name -> google.fhir.r5.core.Extension
	22,  // 130: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.code:type_name -> google.fhir.r5.core.Code
	16,  // 131: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.value:type_name -> google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ValueX
	17,  // 132: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.sub_property:type_name -> google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty
	22,  // 133: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ValueX.code:type_name -> google.fhir.r5.core.Code
	37,  // 134: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ValueX.coding:type_name -> google.fhir.r5.core.Coding
	27,  // 135: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ValueX.string_value:type_name -> google.fhir.r5.core.String
	39,  // 136: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	28,  // 137: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	29,  // 138: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	42,  // 139: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ValueX.decimal:type_name -> google.fhir.r5.core.Decimal
	27,  // 140: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.id:type_name -> google.fhir.r5.core.String
	25,  // 141: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.extension:type_name -> google.fhir.r5.core.Extension
	25,  // 142: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.modifier_extension:type_name -> google.fhir.r5.core.Extension
	22,  // 143: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.code:type_name -> google.fhir.r5.core.Code
	18,  // 144: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.value:type_name -> google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.ValueX
	22,  // 145: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.ValueX.code:type_name -> google.fhir.r5.core.Code
	37,  // 146: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.ValueX.coding:type_name -> google.fhir.r5.core.Coding
	27,  // 147: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.ValueX.string_value:type_name -> google.fhir.r5.core.String
	39,  // 148: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	28,  // 149: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	29,  // 150: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.ValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	42,  // 151: google.fhir.r5.core.ValueSet.Expansion.Contains.ConceptProperty.ConceptSubProperty.ValueX.decimal:type_name -> google.fhir.r5.core.Decimal
	152, // [152:152] is the sub-list for method output_type
	152, // [152:152] is the sub-list for method input_type
	152, // [152:152] is the sub-list for extension type_name
	152, // [152:152] is the sub-list for extension extendee
	0,   // [0:152] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_value_set_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_value_set_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_value_set_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_VersionAlgorithmX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Compose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Compose_ConceptSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Compose_ConceptSet_ConceptReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Compose_ConceptSet_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Compose_ConceptSet_ConceptReference_Designation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Compose_ConceptSet_Filter_OpCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion_Contains); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion_Parameter_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion_Contains_ConceptProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion_Contains_ConceptProperty_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ValueSet_VersionAlgorithmX_StringValue)(nil),
		(*ValueSet_VersionAlgorithmX_Coding)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ValueSet_Expansion_Parameter_ValueX_StringValue)(nil),
		(*ValueSet_Expansion_Parameter_ValueX_Boolean)(nil),
		(*ValueSet_Expansion_Parameter_ValueX_Integer)(nil),
		(*ValueSet_Expansion_Parameter_ValueX_Decimal)(nil),
		(*ValueSet_Expansion_Parameter_ValueX_Uri)(nil),
		(*ValueSet_Expansion_Parameter_ValueX_Code)(nil),
		(*ValueSet_Expansion_Parameter_ValueX_DateTime)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Code)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Coding)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_StringValue)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Integer)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Boolean)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_DateTime)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ValueX_Decimal)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Code)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Coding)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_StringValue)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Integer)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Boolean)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_DateTime)(nil),
		(*ValueSet_Expansion_Contains_ConceptProperty_ConceptSubProperty_ValueX_Decimal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_value_set_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_value_set_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_value_set_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_value_set_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_value_set_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_value_set_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_value_set_proto_depIdxs = nil
}
