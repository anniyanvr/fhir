//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/resources/questionnaire.proto

package questionnaire_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	valuesets_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/valuesets_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Questionnaire.
// A structured set of questions.
// See http://hl7.org/fhir/StructureDefinition/Questionnaire
type Questionnaire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*anypb.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Canonical identifier for this questionnaire, represented as an absolute URI
	// (globally unique)
	Url *datatypes_go_proto.Uri `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	// Business identifier for questionnaire
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,11,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Business version of the questionnaire
	Version          *datatypes_go_proto.String       `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	VersionAlgorithm *Questionnaire_VersionAlgorithmX `protobuf:"bytes,32,opt,name=version_algorithm,json=versionAlgorithm,proto3" json:"version_algorithm,omitempty"`
	// Name for this questionnaire (computer friendly)
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Name for this questionnaire (human friendly)
	Title *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=title,proto3" json:"title,omitempty"`
	// Based on Questionnaire
	DerivedFrom []*datatypes_go_proto.Canonical `protobuf:"bytes,15,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	Status      *Questionnaire_StatusCode       `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	// For testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean      `protobuf:"bytes,17,opt,name=experimental,proto3" json:"experimental,omitempty"`
	SubjectType  []*Questionnaire_SubjectTypeCode `protobuf:"bytes,18,rep,name=subject_type,json=subjectType,proto3" json:"subject_type,omitempty"`
	// Date last changed
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,19,opt,name=date,proto3" json:"date,omitempty"`
	// Name of the publisher/steward (organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Contact details for the publisher
	Contact []*datatypes_go_proto.ContactDetail `protobuf:"bytes,21,rep,name=contact,proto3" json:"contact,omitempty"`
	// Natural language description of the questionnaire
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,22,opt,name=description,proto3" json:"description,omitempty"`
	// The context that the content is intended to support
	UseContext []*datatypes_go_proto.UsageContext `protobuf:"bytes,23,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Intended jurisdiction for questionnaire (if applicable)
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// Why this questionnaire is defined
	Purpose *datatypes_go_proto.Markdown `protobuf:"bytes,25,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.Markdown `protobuf:"bytes,26,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// Copyright holder and year(s)
	CopyrightLabel *datatypes_go_proto.String `protobuf:"bytes,33,opt,name=copyright_label,json=copyrightLabel,proto3" json:"copyright_label,omitempty"`
	// When the questionnaire was approved by publisher
	ApprovalDate *datatypes_go_proto.Date `protobuf:"bytes,27,opt,name=approval_date,json=approvalDate,proto3" json:"approval_date,omitempty"`
	// When the questionnaire was last reviewed by the publisher
	LastReviewDate *datatypes_go_proto.Date `protobuf:"bytes,28,opt,name=last_review_date,json=lastReviewDate,proto3" json:"last_review_date,omitempty"`
	// When the questionnaire is expected to be used
	EffectivePeriod *datatypes_go_proto.Period `protobuf:"bytes,29,opt,name=effective_period,json=effectivePeriod,proto3" json:"effective_period,omitempty"`
	// Concept that represents the overall questionnaire
	Code []*datatypes_go_proto.Coding `protobuf:"bytes,30,rep,name=code,proto3" json:"code,omitempty"`
	Item []*Questionnaire_Item        `protobuf:"bytes,31,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *Questionnaire) Reset() {
	*x = Questionnaire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire) ProtoMessage() {}

func (x *Questionnaire) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire.ProtoReflect.Descriptor instead.
func (*Questionnaire) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0}
}

func (x *Questionnaire) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Questionnaire) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Questionnaire) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Questionnaire) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Questionnaire) GetContained() []*anypb.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Questionnaire) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Questionnaire) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Questionnaire) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Questionnaire) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Questionnaire) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Questionnaire) GetVersionAlgorithm() *Questionnaire_VersionAlgorithmX {
	if x != nil {
		return x.VersionAlgorithm
	}
	return nil
}

func (x *Questionnaire) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Questionnaire) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Questionnaire) GetDerivedFrom() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *Questionnaire) GetStatus() *Questionnaire_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Questionnaire) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *Questionnaire) GetSubjectType() []*Questionnaire_SubjectTypeCode {
	if x != nil {
		return x.SubjectType
	}
	return nil
}

func (x *Questionnaire) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Questionnaire) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *Questionnaire) GetContact() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Questionnaire) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Questionnaire) GetUseContext() []*datatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *Questionnaire) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *Questionnaire) GetPurpose() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *Questionnaire) GetCopyright() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *Questionnaire) GetCopyrightLabel() *datatypes_go_proto.String {
	if x != nil {
		return x.CopyrightLabel
	}
	return nil
}

func (x *Questionnaire) GetApprovalDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ApprovalDate
	}
	return nil
}

func (x *Questionnaire) GetLastReviewDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.LastReviewDate
	}
	return nil
}

func (x *Questionnaire) GetEffectivePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.EffectivePeriod
	}
	return nil
}

func (x *Questionnaire) GetCode() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Questionnaire) GetItem() []*Questionnaire_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

// How to compare versions
type Questionnaire_VersionAlgorithmX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Questionnaire_VersionAlgorithmX_StringValue
	//	*Questionnaire_VersionAlgorithmX_Coding
	Choice isQuestionnaire_VersionAlgorithmX_Choice `protobuf_oneof:"choice"`
}

func (x *Questionnaire_VersionAlgorithmX) Reset() {
	*x = Questionnaire_VersionAlgorithmX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_VersionAlgorithmX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_VersionAlgorithmX) ProtoMessage() {}

func (x *Questionnaire_VersionAlgorithmX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_VersionAlgorithmX.ProtoReflect.Descriptor instead.
func (*Questionnaire_VersionAlgorithmX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Questionnaire_VersionAlgorithmX) GetChoice() isQuestionnaire_VersionAlgorithmX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Questionnaire_VersionAlgorithmX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*Questionnaire_VersionAlgorithmX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Questionnaire_VersionAlgorithmX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*Questionnaire_VersionAlgorithmX_Coding); ok {
		return x.Coding
	}
	return nil
}

type isQuestionnaire_VersionAlgorithmX_Choice interface {
	isQuestionnaire_VersionAlgorithmX_Choice()
}

type Questionnaire_VersionAlgorithmX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type Questionnaire_VersionAlgorithmX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,2,opt,name=coding,proto3,oneof"`
}

func (*Questionnaire_VersionAlgorithmX_StringValue) isQuestionnaire_VersionAlgorithmX_Choice() {}

func (*Questionnaire_VersionAlgorithmX_Coding) isQuestionnaire_VersionAlgorithmX_Choice() {}

// draft | active | retired | unknown
type Questionnaire_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.PublicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.PublicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Questionnaire_StatusCode) Reset() {
	*x = Questionnaire_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_StatusCode) ProtoMessage() {}

func (x *Questionnaire_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_StatusCode.ProtoReflect.Descriptor instead.
func (*Questionnaire_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Questionnaire_StatusCode) GetValue() codes_go_proto.PublicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.PublicationStatusCode_Value(0)
}

func (x *Questionnaire_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Resource that can be subject of QuestionnaireResponse
type Questionnaire_SubjectTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.ResourceTypeValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ResourceTypeValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Questionnaire_SubjectTypeCode) Reset() {
	*x = Questionnaire_SubjectTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_SubjectTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_SubjectTypeCode) ProtoMessage() {}

func (x *Questionnaire_SubjectTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_SubjectTypeCode.ProtoReflect.Descriptor instead.
func (*Questionnaire_SubjectTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Questionnaire_SubjectTypeCode) GetValue() valuesets_go_proto.ResourceTypeValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.ResourceTypeValueSet_Value(0)
}

func (x *Questionnaire_SubjectTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_SubjectTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Questions and sections within the Questionnaire
type Questionnaire_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique id for item in questionnaire
	LinkId *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// ElementDefinition - details for the item
	Definition *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=definition,proto3" json:"definition,omitempty"`
	// Corresponding concept for this item in a terminology
	Code []*datatypes_go_proto.Coding `protobuf:"bytes,6,rep,name=code,proto3" json:"code,omitempty"`
	// E.g. "1(a)", "2.5.3"
	Prefix *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Primary text for the item
	Text            *datatypes_go_proto.String              `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
	Type            *Questionnaire_Item_TypeCode            `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	EnableWhen      []*Questionnaire_Item_EnableWhen        `protobuf:"bytes,10,rep,name=enable_when,json=enableWhen,proto3" json:"enable_when,omitempty"`
	EnableBehavior  *Questionnaire_Item_EnableBehaviorCode  `protobuf:"bytes,11,opt,name=enable_behavior,json=enableBehavior,proto3" json:"enable_behavior,omitempty"`
	DisabledDisplay *Questionnaire_Item_DisabledDisplayCode `protobuf:"bytes,20,opt,name=disabled_display,json=disabledDisplay,proto3" json:"disabled_display,omitempty"`
	// Whether the item must be included in data results
	Required *datatypes_go_proto.Boolean `protobuf:"bytes,12,opt,name=required,proto3" json:"required,omitempty"`
	// Whether the item may repeat
	Repeats *datatypes_go_proto.Boolean `protobuf:"bytes,13,opt,name=repeats,proto3" json:"repeats,omitempty"`
	// Don't allow human editing
	ReadOnly *datatypes_go_proto.Boolean `protobuf:"bytes,14,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	// No more than these many characters
	MaxLength        *datatypes_go_proto.Integer              `protobuf:"bytes,15,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	AnswerConstraint *Questionnaire_Item_AnswerConstraintCode `protobuf:"bytes,21,opt,name=answer_constraint,json=answerConstraint,proto3" json:"answer_constraint,omitempty"`
	// ValueSet containing permitted answers
	AnswerValueSet *datatypes_go_proto.Canonical      `protobuf:"bytes,16,opt,name=answer_value_set,json=answerValueSet,proto3" json:"answer_value_set,omitempty"`
	AnswerOption   []*Questionnaire_Item_AnswerOption `protobuf:"bytes,17,rep,name=answer_option,json=answerOption,proto3" json:"answer_option,omitempty"`
	Initial        []*Questionnaire_Item_Initial      `protobuf:"bytes,18,rep,name=initial,proto3" json:"initial,omitempty"`
	// Nested questionnaire items
	Item []*Questionnaire_Item `protobuf:"bytes,19,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *Questionnaire_Item) Reset() {
	*x = Questionnaire_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item) ProtoMessage() {}

func (x *Questionnaire_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Questionnaire_Item) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_Item) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Questionnaire_Item) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Questionnaire_Item) GetLinkId() *datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *Questionnaire_Item) GetDefinition() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *Questionnaire_Item) GetCode() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Questionnaire_Item) GetPrefix() *datatypes_go_proto.String {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Questionnaire_Item) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Questionnaire_Item) GetType() *Questionnaire_Item_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Questionnaire_Item) GetEnableWhen() []*Questionnaire_Item_EnableWhen {
	if x != nil {
		return x.EnableWhen
	}
	return nil
}

func (x *Questionnaire_Item) GetEnableBehavior() *Questionnaire_Item_EnableBehaviorCode {
	if x != nil {
		return x.EnableBehavior
	}
	return nil
}

func (x *Questionnaire_Item) GetDisabledDisplay() *Questionnaire_Item_DisabledDisplayCode {
	if x != nil {
		return x.DisabledDisplay
	}
	return nil
}

func (x *Questionnaire_Item) GetRequired() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *Questionnaire_Item) GetRepeats() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Repeats
	}
	return nil
}

func (x *Questionnaire_Item) GetReadOnly() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ReadOnly
	}
	return nil
}

func (x *Questionnaire_Item) GetMaxLength() *datatypes_go_proto.Integer {
	if x != nil {
		return x.MaxLength
	}
	return nil
}

func (x *Questionnaire_Item) GetAnswerConstraint() *Questionnaire_Item_AnswerConstraintCode {
	if x != nil {
		return x.AnswerConstraint
	}
	return nil
}

func (x *Questionnaire_Item) GetAnswerValueSet() *datatypes_go_proto.Canonical {
	if x != nil {
		return x.AnswerValueSet
	}
	return nil
}

func (x *Questionnaire_Item) GetAnswerOption() []*Questionnaire_Item_AnswerOption {
	if x != nil {
		return x.AnswerOption
	}
	return nil
}

func (x *Questionnaire_Item) GetInitial() []*Questionnaire_Item_Initial {
	if x != nil {
		return x.Initial
	}
	return nil
}

func (x *Questionnaire_Item) GetItem() []*Questionnaire_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

// group | display | boolean | decimal | integer | date | dateTime +
type Questionnaire_Item_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.QuestionnaireItemTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.QuestionnaireItemTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Questionnaire_Item_TypeCode) Reset() {
	*x = Questionnaire_Item_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item_TypeCode) ProtoMessage() {}

func (x *Questionnaire_Item_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item_TypeCode.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Questionnaire_Item_TypeCode) GetValue() codes_go_proto.QuestionnaireItemTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.QuestionnaireItemTypeCode_Value(0)
}

func (x *Questionnaire_Item_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_Item_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Only allow data when
type Questionnaire_Item_EnableWhen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The linkId of question that determines whether item is enabled/disabled
	Question *datatypes_go_proto.String                  `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`
	Operator *Questionnaire_Item_EnableWhen_OperatorCode `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
	Answer   *Questionnaire_Item_EnableWhen_AnswerX      `protobuf:"bytes,6,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *Questionnaire_Item_EnableWhen) Reset() {
	*x = Questionnaire_Item_EnableWhen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item_EnableWhen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item_EnableWhen) ProtoMessage() {}

func (x *Questionnaire_Item_EnableWhen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item_EnableWhen.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item_EnableWhen) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *Questionnaire_Item_EnableWhen) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen) GetQuestion() *datatypes_go_proto.String {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen) GetOperator() *Questionnaire_Item_EnableWhen_OperatorCode {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen) GetAnswer() *Questionnaire_Item_EnableWhen_AnswerX {
	if x != nil {
		return x.Answer
	}
	return nil
}

// all | any
type Questionnaire_Item_EnableBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EnableWhenBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.EnableWhenBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension             `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Questionnaire_Item_EnableBehaviorCode) Reset() {
	*x = Questionnaire_Item_EnableBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item_EnableBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item_EnableBehaviorCode) ProtoMessage() {}

func (x *Questionnaire_Item_EnableBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item_EnableBehaviorCode.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item_EnableBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *Questionnaire_Item_EnableBehaviorCode) GetValue() codes_go_proto.EnableWhenBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EnableWhenBehaviorCode_Value(0)
}

func (x *Questionnaire_Item_EnableBehaviorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_Item_EnableBehaviorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// hidden | protected
type Questionnaire_Item_DisabledDisplayCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.QuestionnaireItemDisabledDisplayCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.QuestionnaireItemDisabledDisplayCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Questionnaire_Item_DisabledDisplayCode) Reset() {
	*x = Questionnaire_Item_DisabledDisplayCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item_DisabledDisplayCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item_DisabledDisplayCode) ProtoMessage() {}

func (x *Questionnaire_Item_DisabledDisplayCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item_DisabledDisplayCode.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item_DisabledDisplayCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *Questionnaire_Item_DisabledDisplayCode) GetValue() codes_go_proto.QuestionnaireItemDisabledDisplayCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.QuestionnaireItemDisabledDisplayCode_Value(0)
}

func (x *Questionnaire_Item_DisabledDisplayCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_Item_DisabledDisplayCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// optionsOnly | optionsOrType | optionsOrString
type Questionnaire_Item_AnswerConstraintCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.QuestionnaireAnswerConstraintCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.QuestionnaireAnswerConstraintCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Questionnaire_Item_AnswerConstraintCode) Reset() {
	*x = Questionnaire_Item_AnswerConstraintCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item_AnswerConstraintCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item_AnswerConstraintCode) ProtoMessage() {}

func (x *Questionnaire_Item_AnswerConstraintCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item_AnswerConstraintCode.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item_AnswerConstraintCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3, 4}
}

func (x *Questionnaire_Item_AnswerConstraintCode) GetValue() codes_go_proto.QuestionnaireAnswerConstraintCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.QuestionnaireAnswerConstraintCode_Value(0)
}

func (x *Questionnaire_Item_AnswerConstraintCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_Item_AnswerConstraintCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Permitted answer
type Questionnaire_Item_AnswerOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Value             *Questionnaire_Item_AnswerOption_ValueX `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Whether option is selected by default
	InitialSelected *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=initial_selected,json=initialSelected,proto3" json:"initial_selected,omitempty"`
}

func (x *Questionnaire_Item_AnswerOption) Reset() {
	*x = Questionnaire_Item_AnswerOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item_AnswerOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item_AnswerOption) ProtoMessage() {}

func (x *Questionnaire_Item_AnswerOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item_AnswerOption.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item_AnswerOption) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3, 5}
}

func (x *Questionnaire_Item_AnswerOption) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_Item_AnswerOption) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Questionnaire_Item_AnswerOption) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Questionnaire_Item_AnswerOption) GetValue() *Questionnaire_Item_AnswerOption_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Questionnaire_Item_AnswerOption) GetInitialSelected() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.InitialSelected
	}
	return nil
}

// Initial value(s) when item is first rendered
type Questionnaire_Item_Initial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Value             *Questionnaire_Item_Initial_ValueX `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Questionnaire_Item_Initial) Reset() {
	*x = Questionnaire_Item_Initial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item_Initial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item_Initial) ProtoMessage() {}

func (x *Questionnaire_Item_Initial) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item_Initial.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item_Initial) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3, 6}
}

func (x *Questionnaire_Item_Initial) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_Item_Initial) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Questionnaire_Item_Initial) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Questionnaire_Item_Initial) GetValue() *Questionnaire_Item_Initial_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// exists | = | != | > | < | >= | <=
type Questionnaire_Item_EnableWhen_OperatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.QuestionnaireItemOperatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.QuestionnaireItemOperatorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Questionnaire_Item_EnableWhen_OperatorCode) Reset() {
	*x = Questionnaire_Item_EnableWhen_OperatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item_EnableWhen_OperatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item_EnableWhen_OperatorCode) ProtoMessage() {}

func (x *Questionnaire_Item_EnableWhen_OperatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item_EnableWhen_OperatorCode.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item_EnableWhen_OperatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3, 1, 0}
}

func (x *Questionnaire_Item_EnableWhen_OperatorCode) GetValue() codes_go_proto.QuestionnaireItemOperatorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.QuestionnaireItemOperatorCode_Value(0)
}

func (x *Questionnaire_Item_EnableWhen_OperatorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen_OperatorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Value for question comparison based on operator
type Questionnaire_Item_EnableWhen_AnswerX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Questionnaire_Item_EnableWhen_AnswerX_Boolean
	//	*Questionnaire_Item_EnableWhen_AnswerX_Decimal
	//	*Questionnaire_Item_EnableWhen_AnswerX_Integer
	//	*Questionnaire_Item_EnableWhen_AnswerX_Date
	//	*Questionnaire_Item_EnableWhen_AnswerX_DateTime
	//	*Questionnaire_Item_EnableWhen_AnswerX_Time
	//	*Questionnaire_Item_EnableWhen_AnswerX_StringValue
	//	*Questionnaire_Item_EnableWhen_AnswerX_Coding
	//	*Questionnaire_Item_EnableWhen_AnswerX_Quantity
	//	*Questionnaire_Item_EnableWhen_AnswerX_Reference
	Choice isQuestionnaire_Item_EnableWhen_AnswerX_Choice `protobuf_oneof:"choice"`
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) Reset() {
	*x = Questionnaire_Item_EnableWhen_AnswerX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item_EnableWhen_AnswerX) ProtoMessage() {}

func (x *Questionnaire_Item_EnableWhen_AnswerX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item_EnableWhen_AnswerX.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item_EnableWhen_AnswerX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3, 1, 1}
}

func (m *Questionnaire_Item_EnableWhen_AnswerX) GetChoice() isQuestionnaire_Item_EnableWhen_AnswerX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*Questionnaire_Item_EnableWhen_AnswerX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetChoice().(*Questionnaire_Item_EnableWhen_AnswerX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*Questionnaire_Item_EnableWhen_AnswerX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*Questionnaire_Item_EnableWhen_AnswerX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*Questionnaire_Item_EnableWhen_AnswerX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*Questionnaire_Item_EnableWhen_AnswerX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*Questionnaire_Item_EnableWhen_AnswerX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*Questionnaire_Item_EnableWhen_AnswerX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*Questionnaire_Item_EnableWhen_AnswerX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Questionnaire_Item_EnableWhen_AnswerX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Questionnaire_Item_EnableWhen_AnswerX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQuestionnaire_Item_EnableWhen_AnswerX_Choice interface {
	isQuestionnaire_Item_EnableWhen_AnswerX_Choice()
}

type Questionnaire_Item_EnableWhen_AnswerX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type Questionnaire_Item_EnableWhen_AnswerX_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,2,opt,name=decimal,proto3,oneof"`
}

type Questionnaire_Item_EnableWhen_AnswerX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=integer,proto3,oneof"`
}

type Questionnaire_Item_EnableWhen_AnswerX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type Questionnaire_Item_EnableWhen_AnswerX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Questionnaire_Item_EnableWhen_AnswerX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,6,opt,name=time,proto3,oneof"`
}

type Questionnaire_Item_EnableWhen_AnswerX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=string_value,json=string,proto3,oneof"`
}

type Questionnaire_Item_EnableWhen_AnswerX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,8,opt,name=coding,proto3,oneof"`
}

type Questionnaire_Item_EnableWhen_AnswerX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,9,opt,name=quantity,proto3,oneof"`
}

type Questionnaire_Item_EnableWhen_AnswerX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=reference,proto3,oneof"`
}

func (*Questionnaire_Item_EnableWhen_AnswerX_Boolean) isQuestionnaire_Item_EnableWhen_AnswerX_Choice() {
}

func (*Questionnaire_Item_EnableWhen_AnswerX_Decimal) isQuestionnaire_Item_EnableWhen_AnswerX_Choice() {
}

func (*Questionnaire_Item_EnableWhen_AnswerX_Integer) isQuestionnaire_Item_EnableWhen_AnswerX_Choice() {
}

func (*Questionnaire_Item_EnableWhen_AnswerX_Date) isQuestionnaire_Item_EnableWhen_AnswerX_Choice() {}

func (*Questionnaire_Item_EnableWhen_AnswerX_DateTime) isQuestionnaire_Item_EnableWhen_AnswerX_Choice() {
}

func (*Questionnaire_Item_EnableWhen_AnswerX_Time) isQuestionnaire_Item_EnableWhen_AnswerX_Choice() {}

func (*Questionnaire_Item_EnableWhen_AnswerX_StringValue) isQuestionnaire_Item_EnableWhen_AnswerX_Choice() {
}

func (*Questionnaire_Item_EnableWhen_AnswerX_Coding) isQuestionnaire_Item_EnableWhen_AnswerX_Choice() {
}

func (*Questionnaire_Item_EnableWhen_AnswerX_Quantity) isQuestionnaire_Item_EnableWhen_AnswerX_Choice() {
}

func (*Questionnaire_Item_EnableWhen_AnswerX_Reference) isQuestionnaire_Item_EnableWhen_AnswerX_Choice() {
}

// Answer value
type Questionnaire_Item_AnswerOption_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Questionnaire_Item_AnswerOption_ValueX_Integer
	//	*Questionnaire_Item_AnswerOption_ValueX_Date
	//	*Questionnaire_Item_AnswerOption_ValueX_Time
	//	*Questionnaire_Item_AnswerOption_ValueX_StringValue
	//	*Questionnaire_Item_AnswerOption_ValueX_Coding
	//	*Questionnaire_Item_AnswerOption_ValueX_Reference
	Choice isQuestionnaire_Item_AnswerOption_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *Questionnaire_Item_AnswerOption_ValueX) Reset() {
	*x = Questionnaire_Item_AnswerOption_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item_AnswerOption_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item_AnswerOption_ValueX) ProtoMessage() {}

func (x *Questionnaire_Item_AnswerOption_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item_AnswerOption_ValueX.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item_AnswerOption_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3, 5, 0}
}

func (m *Questionnaire_Item_AnswerOption_ValueX) GetChoice() isQuestionnaire_Item_AnswerOption_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Questionnaire_Item_AnswerOption_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*Questionnaire_Item_AnswerOption_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Questionnaire_Item_AnswerOption_ValueX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*Questionnaire_Item_AnswerOption_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Questionnaire_Item_AnswerOption_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*Questionnaire_Item_AnswerOption_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Questionnaire_Item_AnswerOption_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*Questionnaire_Item_AnswerOption_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Questionnaire_Item_AnswerOption_ValueX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*Questionnaire_Item_AnswerOption_ValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *Questionnaire_Item_AnswerOption_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Questionnaire_Item_AnswerOption_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQuestionnaire_Item_AnswerOption_ValueX_Choice interface {
	isQuestionnaire_Item_AnswerOption_ValueX_Choice()
}

type Questionnaire_Item_AnswerOption_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,1,opt,name=integer,proto3,oneof"`
}

type Questionnaire_Item_AnswerOption_ValueX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,2,opt,name=date,proto3,oneof"`
}

type Questionnaire_Item_AnswerOption_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,3,opt,name=time,proto3,oneof"`
}

type Questionnaire_Item_AnswerOption_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=string_value,json=string,proto3,oneof"`
}

type Questionnaire_Item_AnswerOption_ValueX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=coding,proto3,oneof"`
}

type Questionnaire_Item_AnswerOption_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=reference,proto3,oneof"`
}

func (*Questionnaire_Item_AnswerOption_ValueX_Integer) isQuestionnaire_Item_AnswerOption_ValueX_Choice() {
}

func (*Questionnaire_Item_AnswerOption_ValueX_Date) isQuestionnaire_Item_AnswerOption_ValueX_Choice() {
}

func (*Questionnaire_Item_AnswerOption_ValueX_Time) isQuestionnaire_Item_AnswerOption_ValueX_Choice() {
}

func (*Questionnaire_Item_AnswerOption_ValueX_StringValue) isQuestionnaire_Item_AnswerOption_ValueX_Choice() {
}

func (*Questionnaire_Item_AnswerOption_ValueX_Coding) isQuestionnaire_Item_AnswerOption_ValueX_Choice() {
}

func (*Questionnaire_Item_AnswerOption_ValueX_Reference) isQuestionnaire_Item_AnswerOption_ValueX_Choice() {
}

// Actual value for initializing the question
type Questionnaire_Item_Initial_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Questionnaire_Item_Initial_ValueX_Boolean
	//	*Questionnaire_Item_Initial_ValueX_Decimal
	//	*Questionnaire_Item_Initial_ValueX_Integer
	//	*Questionnaire_Item_Initial_ValueX_Date
	//	*Questionnaire_Item_Initial_ValueX_DateTime
	//	*Questionnaire_Item_Initial_ValueX_Time
	//	*Questionnaire_Item_Initial_ValueX_StringValue
	//	*Questionnaire_Item_Initial_ValueX_Uri
	//	*Questionnaire_Item_Initial_ValueX_Attachment
	//	*Questionnaire_Item_Initial_ValueX_Coding
	//	*Questionnaire_Item_Initial_ValueX_Quantity
	//	*Questionnaire_Item_Initial_ValueX_Reference
	Choice isQuestionnaire_Item_Initial_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *Questionnaire_Item_Initial_ValueX) Reset() {
	*x = Questionnaire_Item_Initial_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Item_Initial_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Item_Initial_ValueX) ProtoMessage() {}

func (x *Questionnaire_Item_Initial_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Item_Initial_ValueX.ProtoReflect.Descriptor instead.
func (*Questionnaire_Item_Initial_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP(), []int{0, 3, 6, 0}
}

func (m *Questionnaire_Item_Initial_ValueX) GetChoice() isQuestionnaire_Item_Initial_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Questionnaire_Item_Initial_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Questionnaire_Item_Initial_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQuestionnaire_Item_Initial_ValueX_Choice interface {
	isQuestionnaire_Item_Initial_ValueX_Choice()
}

type Questionnaire_Item_Initial_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type Questionnaire_Item_Initial_ValueX_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,2,opt,name=decimal,proto3,oneof"`
}

type Questionnaire_Item_Initial_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=integer,proto3,oneof"`
}

type Questionnaire_Item_Initial_ValueX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type Questionnaire_Item_Initial_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Questionnaire_Item_Initial_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,6,opt,name=time,proto3,oneof"`
}

type Questionnaire_Item_Initial_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=string_value,json=string,proto3,oneof"`
}

type Questionnaire_Item_Initial_ValueX_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,8,opt,name=uri,proto3,oneof"`
}

type Questionnaire_Item_Initial_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,9,opt,name=attachment,proto3,oneof"`
}

type Questionnaire_Item_Initial_ValueX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,10,opt,name=coding,proto3,oneof"`
}

type Questionnaire_Item_Initial_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,11,opt,name=quantity,proto3,oneof"`
}

type Questionnaire_Item_Initial_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=reference,proto3,oneof"`
}

func (*Questionnaire_Item_Initial_ValueX_Boolean) isQuestionnaire_Item_Initial_ValueX_Choice() {}

func (*Questionnaire_Item_Initial_ValueX_Decimal) isQuestionnaire_Item_Initial_ValueX_Choice() {}

func (*Questionnaire_Item_Initial_ValueX_Integer) isQuestionnaire_Item_Initial_ValueX_Choice() {}

func (*Questionnaire_Item_Initial_ValueX_Date) isQuestionnaire_Item_Initial_ValueX_Choice() {}

func (*Questionnaire_Item_Initial_ValueX_DateTime) isQuestionnaire_Item_Initial_ValueX_Choice() {}

func (*Questionnaire_Item_Initial_ValueX_Time) isQuestionnaire_Item_Initial_ValueX_Choice() {}

func (*Questionnaire_Item_Initial_ValueX_StringValue) isQuestionnaire_Item_Initial_ValueX_Choice() {}

func (*Questionnaire_Item_Initial_ValueX_Uri) isQuestionnaire_Item_Initial_ValueX_Choice() {}

func (*Questionnaire_Item_Initial_ValueX_Attachment) isQuestionnaire_Item_Initial_ValueX_Choice() {}

func (*Questionnaire_Item_Initial_ValueX_Coding) isQuestionnaire_Item_Initial_ValueX_Choice() {}

func (*Questionnaire_Item_Initial_ValueX_Quantity) isQuestionnaire_Item_Initial_ValueX_Choice() {}

func (*Questionnaire_Item_Initial_ValueX_Reference) isQuestionnaire_Item_Initial_ValueX_Choice() {}

var File_proto_google_fhir_proto_r5_core_resources_questionnaire_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x4e, 0x0a, 0x0d, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x2b, 0xf2, 0xb9, 0xe4, 0xa3, 0x0b, 0x25, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x5e, 0x7c, 0x23, 0x20, 0x5d,
	0x2b, 0x24, 0x27, 0x29, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x61, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x58, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x0b,
	0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x4d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x46, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0x99, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x58, 0x12, 0x3b, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xae, 0x02, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0xfa, 0x36, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x21, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xb9, 0xe4, 0xa3,
	0x0b, 0x15, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29,
	0x20, 0x3c, 0x3d, 0x20, 0x32, 0x35, 0x35, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53,
	0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57,
	0x68, 0x65, 0x6e, 0x12, 0x63, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x66, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3b, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x69, 0x0a, 0x11, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x10, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x0e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12,
	0x59, 0x0a, 0x0d, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x07, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x1a, 0xa7, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xb2, 0x0b, 0x0a,
	0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x2e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x1a, 0xc3, 0x02, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x78, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xea, 0x04,
	0x0a, 0x07, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x38, 0x0a,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x35, 0x9a, 0x86, 0x93, 0xa0,
	0x08, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x27, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x27, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x28, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x29, 0x1a, 0xc2, 0x02, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x78, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xd2, 0x02, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x79, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2d, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xd1, 0x02, 0x0a, 0x14,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x7a, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a,
	0xe9, 0x05, 0x0a, 0x0c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0xfa,
	0x02, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xf6, 0x07, 0x0a, 0x07,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xda, 0x05, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x41, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35,
	0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x3a, 0xe9, 0x07, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x49, 0x28, 0x74, 0x79,
	0x70, 0x65, 0x3d, 0x27, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x25,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3d,
	0x27, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x27, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29,
	0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x23, 0x74, 0x79, 0x70, 0x65,
	0x3d, 0x27, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x27, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a,
	0x86, 0x93, 0xa0, 0x08, 0x1f, 0x74, 0x79, 0x70, 0x65, 0x21, 0x3d, 0x27, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0xcb, 0x01, 0x28,
	0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x27, 0x20, 0x6f, 0x72,
	0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x27, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20,
	0x27, 0x64, 0x61, 0x74, 0x65, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d,
	0x20, 0x27, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x74, 0x69, 0x6d, 0x65, 0x27, 0x20, 0x6f, 0x72, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x27, 0x20,
	0x6f, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x39,
	0x74, 0x79, 0x70, 0x65, 0x21, 0x3d, 0x27, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x27, 0x20,
	0x6f, 0x72, 0x20, 0x28, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x36, 0x28,
	0x74, 0x79, 0x70, 0x65, 0x21, 0x3d, 0x27, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x27, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x21, 0x3d, 0x27, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x23, 0x74, 0x79, 0x70, 0x65, 0x21,
	0x3d, 0x27, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x83, 0x01, 0x28, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x28, 0x27,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x27, 0x20, 0x7c, 0x20, 0x27, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x27, 0x20, 0x7c, 0x20, 0x27, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x27,
	0x20, 0x7c, 0x20, 0x27, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x27, 0x20, 0x7c, 0x20, 0x27, 0x74,
	0x65, 0x78, 0x74, 0x27, 0x20, 0x7c, 0x20, 0x27, 0x75, 0x72, 0x6c, 0x27, 0x29, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x3d, 0x27, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x27, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x36, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x57, 0x68, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20,
	0x31, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x24, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x3d, 0x74,
	0x72, 0x75, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x31, 0x9a, 0xaf, 0xae, 0xa4, 0x0b,
	0x27, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x27, 0x20, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x9a, 0xaf, 0xae, 0xa4, 0x0b, 0x52, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x3a, 0xb0, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x21, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x73, 0x28, 0x29, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x2e, 0x69,
	0x73, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x28, 0x29, 0x9a, 0xaf, 0xae, 0xa4, 0x0b,
	0x42, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x28, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x29, 0x7b, 0x31, 0x2c, 0x32, 0x35, 0x34, 0x7d,
	0x24, 0x27, 0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x7d, 0x98, 0xc6, 0xb0, 0xb5, 0x07,
	0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x5a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f,
	0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_goTypes = []interface{}{
	(*Questionnaire)(nil),                                          // 0: google.fhir.r5.core.Questionnaire
	(*Questionnaire_VersionAlgorithmX)(nil),                        // 1: google.fhir.r5.core.Questionnaire.VersionAlgorithmX
	(*Questionnaire_StatusCode)(nil),                               // 2: google.fhir.r5.core.Questionnaire.StatusCode
	(*Questionnaire_SubjectTypeCode)(nil),                          // 3: google.fhir.r5.core.Questionnaire.SubjectTypeCode
	(*Questionnaire_Item)(nil),                                     // 4: google.fhir.r5.core.Questionnaire.Item
	(*Questionnaire_Item_TypeCode)(nil),                            // 5: google.fhir.r5.core.Questionnaire.Item.TypeCode
	(*Questionnaire_Item_EnableWhen)(nil),                          // 6: google.fhir.r5.core.Questionnaire.Item.EnableWhen
	(*Questionnaire_Item_EnableBehaviorCode)(nil),                  // 7: google.fhir.r5.core.Questionnaire.Item.EnableBehaviorCode
	(*Questionnaire_Item_DisabledDisplayCode)(nil),                 // 8: google.fhir.r5.core.Questionnaire.Item.DisabledDisplayCode
	(*Questionnaire_Item_AnswerConstraintCode)(nil),                // 9: google.fhir.r5.core.Questionnaire.Item.AnswerConstraintCode
	(*Questionnaire_Item_AnswerOption)(nil),                        // 10: google.fhir.r5.core.Questionnaire.Item.AnswerOption
	(*Questionnaire_Item_Initial)(nil),                             // 11: google.fhir.r5.core.Questionnaire.Item.Initial
	(*Questionnaire_Item_EnableWhen_OperatorCode)(nil),             // 12: google.fhir.r5.core.Questionnaire.Item.EnableWhen.OperatorCode
	(*Questionnaire_Item_EnableWhen_AnswerX)(nil),                  // 13: google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX
	(*Questionnaire_Item_AnswerOption_ValueX)(nil),                 // 14: google.fhir.r5.core.Questionnaire.Item.AnswerOption.ValueX
	(*Questionnaire_Item_Initial_ValueX)(nil),                      // 15: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX
	(*datatypes_go_proto.Id)(nil),                                  // 16: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                // 17: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                 // 18: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                // 19: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                           // 20: google.fhir.r5.core.Narrative
	(*anypb.Any)(nil),                                              // 21: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                           // 22: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                          // 23: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.String)(nil),                              // 24: google.fhir.r5.core.String
	(*datatypes_go_proto.Canonical)(nil),                           // 25: google.fhir.r5.core.Canonical
	(*datatypes_go_proto.Boolean)(nil),                             // 26: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.DateTime)(nil),                            // 27: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.ContactDetail)(nil),                       // 28: google.fhir.r5.core.ContactDetail
	(*datatypes_go_proto.Markdown)(nil),                            // 29: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.UsageContext)(nil),                        // 30: google.fhir.r5.core.UsageContext
	(*datatypes_go_proto.CodeableConcept)(nil),                     // 31: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Date)(nil),                                // 32: google.fhir.r5.core.Date
	(*datatypes_go_proto.Period)(nil),                              // 33: google.fhir.r5.core.Period
	(*datatypes_go_proto.Coding)(nil),                              // 34: google.fhir.r5.core.Coding
	(codes_go_proto.PublicationStatusCode_Value)(0),                // 35: google.fhir.r5.core.PublicationStatusCode.Value
	(valuesets_go_proto.ResourceTypeValueSet_Value)(0),             // 36: google.fhir.r5.core.ResourceTypeValueSet.Value
	(*datatypes_go_proto.Integer)(nil),                             // 37: google.fhir.r5.core.Integer
	(codes_go_proto.QuestionnaireItemTypeCode_Value)(0),            // 38: google.fhir.r5.core.QuestionnaireItemTypeCode.Value
	(codes_go_proto.EnableWhenBehaviorCode_Value)(0),               // 39: google.fhir.r5.core.EnableWhenBehaviorCode.Value
	(codes_go_proto.QuestionnaireItemDisabledDisplayCode_Value)(0), // 40: google.fhir.r5.core.QuestionnaireItemDisabledDisplayCode.Value
	(codes_go_proto.QuestionnaireAnswerConstraintCode_Value)(0),    // 41: google.fhir.r5.core.QuestionnaireAnswerConstraintCode.Value
	(codes_go_proto.QuestionnaireItemOperatorCode_Value)(0),        // 42: google.fhir.r5.core.QuestionnaireItemOperatorCode.Value
	(*datatypes_go_proto.Decimal)(nil),                             // 43: google.fhir.r5.core.Decimal
	(*datatypes_go_proto.Time)(nil),                                // 44: google.fhir.r5.core.Time
	(*datatypes_go_proto.Quantity)(nil),                            // 45: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Reference)(nil),                           // 46: google.fhir.r5.core.Reference
	(*datatypes_go_proto.Attachment)(nil),                          // 47: google.fhir.r5.core.Attachment
}
var file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_depIdxs = []int32{
	16,  // 0: google.fhir.r5.core.Questionnaire.id:type_name -> google.fhir.r5.core.Id
	17,  // 1: google.fhir.r5.core.Questionnaire.meta:type_name -> google.fhir.r5.core.Meta
	18,  // 2: google.fhir.r5.core.Questionnaire.implicit_rules:type_name -> google.fhir.r5.core.Uri
	19,  // 3: google.fhir.r5.core.Questionnaire.language:type_name -> google.fhir.r5.core.Code
	20,  // 4: google.fhir.r5.core.Questionnaire.text:type_name -> google.fhir.r5.core.Narrative
	21,  // 5: google.fhir.r5.core.Questionnaire.contained:type_name -> google.protobuf.Any
	22,  // 6: google.fhir.r5.core.Questionnaire.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 7: google.fhir.r5.core.Questionnaire.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18,  // 8: google.fhir.r5.core.Questionnaire.url:type_name -> google.fhir.r5.core.Uri
	23,  // 9: google.fhir.r5.core.Questionnaire.identifier:type_name -> google.fhir.r5.core.Identifier
	24,  // 10: google.fhir.r5.core.Questionnaire.version:type_name -> google.fhir.r5.core.String
	1,   // 11: google.fhir.r5.core.Questionnaire.version_algorithm:type_name -> google.fhir.r5.core.Questionnaire.VersionAlgorithmX
	24,  // 12: google.fhir.r5.core.Questionnaire.name:type_name -> google.fhir.r5.core.String
	24,  // 13: google.fhir.r5.core.Questionnaire.title:type_name -> google.fhir.r5.core.String
	25,  // 14: google.fhir.r5.core.Questionnaire.derived_from:type_name -> google.fhir.r5.core.Canonical
	2,   // 15: google.fhir.r5.core.Questionnaire.status:type_name -> google.fhir.r5.core.Questionnaire.StatusCode
	26,  // 16: google.fhir.r5.core.Questionnaire.experimental:type_name -> google.fhir.r5.core.Boolean
	3,   // 17: google.fhir.r5.core.Questionnaire.subject_type:type_name -> google.fhir.r5.core.Questionnaire.SubjectTypeCode
	27,  // 18: google.fhir.r5.core.Questionnaire.date:type_name -> google.fhir.r5.core.DateTime
	24,  // 19: google.fhir.r5.core.Questionnaire.publisher:type_name -> google.fhir.r5.core.String
	28,  // 20: google.fhir.r5.core.Questionnaire.contact:type_name -> google.fhir.r5.core.ContactDetail
	29,  // 21: google.fhir.r5.core.Questionnaire.description:type_name -> google.fhir.r5.core.Markdown
	30,  // 22: google.fhir.r5.core.Questionnaire.use_context:type_name -> google.fhir.r5.core.UsageContext
	31,  // 23: google.fhir.r5.core.Questionnaire.jurisdiction:type_name -> google.fhir.r5.core.CodeableConcept
	29,  // 24: google.fhir.r5.core.Questionnaire.purpose:type_name -> google.fhir.r5.core.Markdown
	29,  // 25: google.fhir.r5.core.Questionnaire.copyright:type_name -> google.fhir.r5.core.Markdown
	24,  // 26: google.fhir.r5.core.Questionnaire.copyright_label:type_name -> google.fhir.r5.core.String
	32,  // 27: google.fhir.r5.core.Questionnaire.approval_date:type_name -> google.fhir.r5.core.Date
	32,  // 28: google.fhir.r5.core.Questionnaire.last_review_date:type_name -> google.fhir.r5.core.Date
	33,  // 29: google.fhir.r5.core.Questionnaire.effective_period:type_name -> google.fhir.r5.core.Period
	34,  // 30: google.fhir.r5.core.Questionnaire.code:type_name -> google.fhir.r5.core.Coding
	4,   // 31: google.fhir.r5.core.Questionnaire.item:type_name -> google.fhir.r5.core.Questionnaire.Item
	24,  // 32: google.fhir.r5.core.Questionnaire.VersionAlgorithmX.string_value:type_name -> google.fhir.r5.core.String
	34,  // 33: google.fhir.r5.core.Questionnaire.VersionAlgorithmX.coding:type_name -> google.fhir.r5.core.Coding
	35,  // 34: google.fhir.r5.core.Questionnaire.StatusCode.value:type_name -> google.fhir.r5.core.PublicationStatusCode.Value
	24,  // 35: google.fhir.r5.core.Questionnaire.StatusCode.id:type_name -> google.fhir.r5.core.String
	22,  // 36: google.fhir.r5.core.Questionnaire.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	36,  // 37: google.fhir.r5.core.Questionnaire.SubjectTypeCode.value:type_name -> google.fhir.r5.core.ResourceTypeValueSet.Value
	24,  // 38: google.fhir.r5.core.Questionnaire.SubjectTypeCode.id:type_name -> google.fhir.r5.core.String
	22,  // 39: google.fhir.r5.core.Questionnaire.SubjectTypeCode.extension:type_name -> google.fhir.r5.core.Extension
	24,  // 40: google.fhir.r5.core.Questionnaire.Item.id:type_name -> google.fhir.r5.core.String
	22,  // 41: google.fhir.r5.core.Questionnaire.Item.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 42: google.fhir.r5.core.Questionnaire.Item.modifier_extension:type_name -> google.fhir.r5.core.Extension
	24,  // 43: google.fhir.r5.core.Questionnaire.Item.link_id:type_name -> google.fhir.r5.core.String
	18,  // 44: google.fhir.r5.core.Questionnaire.Item.definition:type_name -> google.fhir.r5.core.Uri
	34,  // 45: google.fhir.r5.core.Questionnaire.Item.code:type_name -> google.fhir.r5.core.Coding
	24,  // 46: google.fhir.r5.core.Questionnaire.Item.prefix:type_name -> google.fhir.r5.core.String
	24,  // 47: google.fhir.r5.core.Questionnaire.Item.text:type_name -> google.fhir.r5.core.String
	5,   // 48: google.fhir.r5.core.Questionnaire.Item.type:type_name -> google.fhir.r5.core.Questionnaire.Item.TypeCode
	6,   // 49: google.fhir.r5.core.Questionnaire.Item.enable_when:type_name -> google.fhir.r5.core.Questionnaire.Item.EnableWhen
	7,   // 50: google.fhir.r5.core.Questionnaire.Item.enable_behavior:type_name -> google.fhir.r5.core.Questionnaire.Item.EnableBehaviorCode
	8,   // 51: google.fhir.r5.core.Questionnaire.Item.disabled_display:type_name -> google.fhir.r5.core.Questionnaire.Item.DisabledDisplayCode
	26,  // 52: google.fhir.r5.core.Questionnaire.Item.required:type_name -> google.fhir.r5.core.Boolean
	26,  // 53: google.fhir.r5.core.Questionnaire.Item.repeats:type_name -> google.fhir.r5.core.Boolean
	26,  // 54: google.fhir.r5.core.Questionnaire.Item.read_only:type_name -> google.fhir.r5.core.Boolean
	37,  // 55: google.fhir.r5.core.Questionnaire.Item.max_length:type_name -> google.fhir.r5.core.Integer
	9,   // 56: google.fhir.r5.core.Questionnaire.Item.answer_constraint:type_name -> google.fhir.r5.core.Questionnaire.Item.AnswerConstraintCode
	25,  // 57: google.fhir.r5.core.Questionnaire.Item.answer_value_set:type_name -> google.fhir.r5.core.Canonical
	10,  // 58: google.fhir.r5.core.Questionnaire.Item.answer_option:type_name -> google.fhir.r5.core.Questionnaire.Item.AnswerOption
	11,  // 59: google.fhir.r5.core.Questionnaire.Item.initial:type_name -> google.fhir.r5.core.Questionnaire.Item.Initial
	4,   // 60: google.fhir.r5.core.Questionnaire.Item.item:type_name -> google.fhir.r5.core.Questionnaire.Item
	38,  // 61: google.fhir.r5.core.Questionnaire.Item.TypeCode.value:type_name -> google.fhir.r5.core.QuestionnaireItemTypeCode.Value
	24,  // 62: google.fhir.r5.core.Questionnaire.Item.TypeCode.id:type_name -> google.fhir.r5.core.String
	22,  // 63: google.fhir.r5.core.Questionnaire.Item.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	24,  // 64: google.fhir.r5.core.Questionnaire.Item.EnableWhen.id:type_name -> google.fhir.r5.core.String
	22,  // 65: google.fhir.r5.core.Questionnaire.Item.EnableWhen.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 66: google.fhir.r5.core.Questionnaire.Item.EnableWhen.modifier_extension:type_name -> google.fhir.r5.core.Extension
	24,  // 67: google.fhir.r5.core.Questionnaire.Item.EnableWhen.question:type_name -> google.fhir.r5.core.String
	12,  // 68: google.fhir.r5.core.Questionnaire.Item.EnableWhen.operator:type_name -> google.fhir.r5.core.Questionnaire.Item.EnableWhen.OperatorCode
	13,  // 69: google.fhir.r5.core.Questionnaire.Item.EnableWhen.answer:type_name -> google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX
	39,  // 70: google.fhir.r5.core.Questionnaire.Item.EnableBehaviorCode.value:type_name -> google.fhir.r5.core.EnableWhenBehaviorCode.Value
	24,  // 71: google.fhir.r5.core.Questionnaire.Item.EnableBehaviorCode.id:type_name -> google.fhir.r5.core.String
	22,  // 72: google.fhir.r5.core.Questionnaire.Item.EnableBehaviorCode.extension:type_name -> google.fhir.r5.core.Extension
	40,  // 73: google.fhir.r5.core.Questionnaire.Item.DisabledDisplayCode.value:type_name -> google.fhir.r5.core.QuestionnaireItemDisabledDisplayCode.Value
	24,  // 74: google.fhir.r5.core.Questionnaire.Item.DisabledDisplayCode.id:type_name -> google.fhir.r5.core.String
	22,  // 75: google.fhir.r5.core.Questionnaire.Item.DisabledDisplayCode.extension:type_name -> google.fhir.r5.core.Extension
	41,  // 76: google.fhir.r5.core.Questionnaire.Item.AnswerConstraintCode.value:type_name -> google.fhir.r5.core.QuestionnaireAnswerConstraintCode.Value
	24,  // 77: google.fhir.r5.core.Questionnaire.Item.AnswerConstraintCode.id:type_name -> google.fhir.r5.core.String
	22,  // 78: google.fhir.r5.core.Questionnaire.Item.AnswerConstraintCode.extension:type_name -> google.fhir.r5.core.Extension
	24,  // 79: google.fhir.r5.core.Questionnaire.Item.AnswerOption.id:type_name -> google.fhir.r5.core.String
	22,  // 80: google.fhir.r5.core.Questionnaire.Item.AnswerOption.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 81: google.fhir.r5.core.Questionnaire.Item.AnswerOption.modifier_extension:type_name -> google.fhir.r5.core.Extension
	14,  // 82: google.fhir.r5.core.Questionnaire.Item.AnswerOption.value:type_name -> google.fhir.r5.core.Questionnaire.Item.AnswerOption.ValueX
	26,  // 83: google.fhir.r5.core.Questionnaire.Item.AnswerOption.initial_selected:type_name -> google.fhir.r5.core.Boolean
	24,  // 84: google.fhir.r5.core.Questionnaire.Item.Initial.id:type_name -> google.fhir.r5.core.String
	22,  // 85: google.fhir.r5.core.Questionnaire.Item.Initial.extension:type_name -> google.fhir.r5.core.Extension
	22,  // 86: google.fhir.r5.core.Questionnaire.Item.Initial.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15,  // 87: google.fhir.r5.core.Questionnaire.Item.Initial.value:type_name -> google.fhir.r5.core.Questionnaire.Item.Initial.ValueX
	42,  // 88: google.fhir.r5.core.Questionnaire.Item.EnableWhen.OperatorCode.value:type_name -> google.fhir.r5.core.QuestionnaireItemOperatorCode.Value
	24,  // 89: google.fhir.r5.core.Questionnaire.Item.EnableWhen.OperatorCode.id:type_name -> google.fhir.r5.core.String
	22,  // 90: google.fhir.r5.core.Questionnaire.Item.EnableWhen.OperatorCode.extension:type_name -> google.fhir.r5.core.Extension
	26,  // 91: google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX.boolean:type_name -> google.fhir.r5.core.Boolean
	43,  // 92: google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX.decimal:type_name -> google.fhir.r5.core.Decimal
	37,  // 93: google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX.integer:type_name -> google.fhir.r5.core.Integer
	32,  // 94: google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX.date:type_name -> google.fhir.r5.core.Date
	27,  // 95: google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX.date_time:type_name -> google.fhir.r5.core.DateTime
	44,  // 96: google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX.time:type_name -> google.fhir.r5.core.Time
	24,  // 97: google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX.string_value:type_name -> google.fhir.r5.core.String
	34,  // 98: google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX.coding:type_name -> google.fhir.r5.core.Coding
	45,  // 99: google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX.quantity:type_name -> google.fhir.r5.core.Quantity
	46,  // 100: google.fhir.r5.core.Questionnaire.Item.EnableWhen.AnswerX.reference:type_name -> google.fhir.r5.core.Reference
	37,  // 101: google.fhir.r5.core.Questionnaire.Item.AnswerOption.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	32,  // 102: google.fhir.r5.core.Questionnaire.Item.AnswerOption.ValueX.date:type_name -> google.fhir.r5.core.Date
	44,  // 103: google.fhir.r5.core.Questionnaire.Item.AnswerOption.ValueX.time:type_name -> google.fhir.r5.core.Time
	24,  // 104: google.fhir.r5.core.Questionnaire.Item.AnswerOption.ValueX.string_value:type_name -> google.fhir.r5.core.String
	34,  // 105: google.fhir.r5.core.Questionnaire.Item.AnswerOption.ValueX.coding:type_name -> google.fhir.r5.core.Coding
	46,  // 106: google.fhir.r5.core.Questionnaire.Item.AnswerOption.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	26,  // 107: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	43,  // 108: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.decimal:type_name -> google.fhir.r5.core.Decimal
	37,  // 109: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	32,  // 110: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.date:type_name -> google.fhir.r5.core.Date
	27,  // 111: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	44,  // 112: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.time:type_name -> google.fhir.r5.core.Time
	24,  // 113: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.string_value:type_name -> google.fhir.r5.core.String
	18,  // 114: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.uri:type_name -> google.fhir.r5.core.Uri
	47,  // 115: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	34,  // 116: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.coding:type_name -> google.fhir.r5.core.Coding
	45,  // 117: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	46,  // 118: google.fhir.r5.core.Questionnaire.Item.Initial.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	119, // [119:119] is the sub-list for method output_type
	119, // [119:119] is the sub-list for method input_type
	119, // [119:119] is the sub-list for extension type_name
	119, // [119:119] is the sub-list for extension extendee
	0,   // [0:119] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_questionnaire_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_VersionAlgorithmX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_SubjectTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item_EnableWhen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item_EnableBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item_DisabledDisplayCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item_AnswerConstraintCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item_AnswerOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item_Initial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item_EnableWhen_OperatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item_EnableWhen_AnswerX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item_AnswerOption_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Item_Initial_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Questionnaire_VersionAlgorithmX_StringValue)(nil),
		(*Questionnaire_VersionAlgorithmX_Coding)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Questionnaire_Item_EnableWhen_AnswerX_Boolean)(nil),
		(*Questionnaire_Item_EnableWhen_AnswerX_Decimal)(nil),
		(*Questionnaire_Item_EnableWhen_AnswerX_Integer)(nil),
		(*Questionnaire_Item_EnableWhen_AnswerX_Date)(nil),
		(*Questionnaire_Item_EnableWhen_AnswerX_DateTime)(nil),
		(*Questionnaire_Item_EnableWhen_AnswerX_Time)(nil),
		(*Questionnaire_Item_EnableWhen_AnswerX_StringValue)(nil),
		(*Questionnaire_Item_EnableWhen_AnswerX_Coding)(nil),
		(*Questionnaire_Item_EnableWhen_AnswerX_Quantity)(nil),
		(*Questionnaire_Item_EnableWhen_AnswerX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Questionnaire_Item_AnswerOption_ValueX_Integer)(nil),
		(*Questionnaire_Item_AnswerOption_ValueX_Date)(nil),
		(*Questionnaire_Item_AnswerOption_ValueX_Time)(nil),
		(*Questionnaire_Item_AnswerOption_ValueX_StringValue)(nil),
		(*Questionnaire_Item_AnswerOption_ValueX_Coding)(nil),
		(*Questionnaire_Item_AnswerOption_ValueX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Questionnaire_Item_Initial_ValueX_Boolean)(nil),
		(*Questionnaire_Item_Initial_ValueX_Decimal)(nil),
		(*Questionnaire_Item_Initial_ValueX_Integer)(nil),
		(*Questionnaire_Item_Initial_ValueX_Date)(nil),
		(*Questionnaire_Item_Initial_ValueX_DateTime)(nil),
		(*Questionnaire_Item_Initial_ValueX_Time)(nil),
		(*Questionnaire_Item_Initial_ValueX_StringValue)(nil),
		(*Questionnaire_Item_Initial_ValueX_Uri)(nil),
		(*Questionnaire_Item_Initial_ValueX_Attachment)(nil),
		(*Questionnaire_Item_Initial_ValueX_Coding)(nil),
		(*Questionnaire_Item_Initial_ValueX_Quantity)(nil),
		(*Questionnaire_Item_Initial_ValueX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_questionnaire_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_questionnaire_proto_depIdxs = nil
}
